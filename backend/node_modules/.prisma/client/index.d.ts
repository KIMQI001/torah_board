
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model DePINProject
 * 
 */
export type DePINProject = $Result.DefaultSelection<Prisma.$DePINProjectPayload>
/**
 * Model UserNode
 * 
 */
export type UserNode = $Result.DefaultSelection<Prisma.$UserNodePayload>
/**
 * Model NodePerformance
 * 
 */
export type NodePerformance = $Result.DefaultSelection<Prisma.$NodePerformancePayload>
/**
 * Model ROICalculation
 * 
 */
export type ROICalculation = $Result.DefaultSelection<Prisma.$ROICalculationPayload>
/**
 * Model SystemNotification
 * 
 */
export type SystemNotification = $Result.DefaultSelection<Prisma.$SystemNotificationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.dePINProject`: Exposes CRUD operations for the **DePINProject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DePINProjects
    * const dePINProjects = await prisma.dePINProject.findMany()
    * ```
    */
  get dePINProject(): Prisma.DePINProjectDelegate<ExtArgs>;

  /**
   * `prisma.userNode`: Exposes CRUD operations for the **UserNode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserNodes
    * const userNodes = await prisma.userNode.findMany()
    * ```
    */
  get userNode(): Prisma.UserNodeDelegate<ExtArgs>;

  /**
   * `prisma.nodePerformance`: Exposes CRUD operations for the **NodePerformance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NodePerformances
    * const nodePerformances = await prisma.nodePerformance.findMany()
    * ```
    */
  get nodePerformance(): Prisma.NodePerformanceDelegate<ExtArgs>;

  /**
   * `prisma.rOICalculation`: Exposes CRUD operations for the **ROICalculation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ROICalculations
    * const rOICalculations = await prisma.rOICalculation.findMany()
    * ```
    */
  get rOICalculation(): Prisma.ROICalculationDelegate<ExtArgs>;

  /**
   * `prisma.systemNotification`: Exposes CRUD operations for the **SystemNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemNotifications
    * const systemNotifications = await prisma.systemNotification.findMany()
    * ```
    */
  get systemNotification(): Prisma.SystemNotificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    DePINProject: 'DePINProject',
    UserNode: 'UserNode',
    NodePerformance: 'NodePerformance',
    ROICalculation: 'ROICalculation',
    SystemNotification: 'SystemNotification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "dePINProject" | "userNode" | "nodePerformance" | "rOICalculation" | "systemNotification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      DePINProject: {
        payload: Prisma.$DePINProjectPayload<ExtArgs>
        fields: Prisma.DePINProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DePINProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DePINProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DePINProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DePINProjectPayload>
          }
          findFirst: {
            args: Prisma.DePINProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DePINProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DePINProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DePINProjectPayload>
          }
          findMany: {
            args: Prisma.DePINProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DePINProjectPayload>[]
          }
          create: {
            args: Prisma.DePINProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DePINProjectPayload>
          }
          createMany: {
            args: Prisma.DePINProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DePINProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DePINProjectPayload>[]
          }
          delete: {
            args: Prisma.DePINProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DePINProjectPayload>
          }
          update: {
            args: Prisma.DePINProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DePINProjectPayload>
          }
          deleteMany: {
            args: Prisma.DePINProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DePINProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DePINProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DePINProjectPayload>
          }
          aggregate: {
            args: Prisma.DePINProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDePINProject>
          }
          groupBy: {
            args: Prisma.DePINProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<DePINProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.DePINProjectCountArgs<ExtArgs>
            result: $Utils.Optional<DePINProjectCountAggregateOutputType> | number
          }
        }
      }
      UserNode: {
        payload: Prisma.$UserNodePayload<ExtArgs>
        fields: Prisma.UserNodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserNodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserNodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNodePayload>
          }
          findFirst: {
            args: Prisma.UserNodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserNodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNodePayload>
          }
          findMany: {
            args: Prisma.UserNodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNodePayload>[]
          }
          create: {
            args: Prisma.UserNodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNodePayload>
          }
          createMany: {
            args: Prisma.UserNodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserNodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNodePayload>[]
          }
          delete: {
            args: Prisma.UserNodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNodePayload>
          }
          update: {
            args: Prisma.UserNodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNodePayload>
          }
          deleteMany: {
            args: Prisma.UserNodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserNodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserNodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNodePayload>
          }
          aggregate: {
            args: Prisma.UserNodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserNode>
          }
          groupBy: {
            args: Prisma.UserNodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserNodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserNodeCountArgs<ExtArgs>
            result: $Utils.Optional<UserNodeCountAggregateOutputType> | number
          }
        }
      }
      NodePerformance: {
        payload: Prisma.$NodePerformancePayload<ExtArgs>
        fields: Prisma.NodePerformanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NodePerformanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePerformancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NodePerformanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePerformancePayload>
          }
          findFirst: {
            args: Prisma.NodePerformanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePerformancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NodePerformanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePerformancePayload>
          }
          findMany: {
            args: Prisma.NodePerformanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePerformancePayload>[]
          }
          create: {
            args: Prisma.NodePerformanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePerformancePayload>
          }
          createMany: {
            args: Prisma.NodePerformanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NodePerformanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePerformancePayload>[]
          }
          delete: {
            args: Prisma.NodePerformanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePerformancePayload>
          }
          update: {
            args: Prisma.NodePerformanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePerformancePayload>
          }
          deleteMany: {
            args: Prisma.NodePerformanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NodePerformanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NodePerformanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NodePerformancePayload>
          }
          aggregate: {
            args: Prisma.NodePerformanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNodePerformance>
          }
          groupBy: {
            args: Prisma.NodePerformanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<NodePerformanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.NodePerformanceCountArgs<ExtArgs>
            result: $Utils.Optional<NodePerformanceCountAggregateOutputType> | number
          }
        }
      }
      ROICalculation: {
        payload: Prisma.$ROICalculationPayload<ExtArgs>
        fields: Prisma.ROICalculationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ROICalculationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ROICalculationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ROICalculationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ROICalculationPayload>
          }
          findFirst: {
            args: Prisma.ROICalculationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ROICalculationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ROICalculationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ROICalculationPayload>
          }
          findMany: {
            args: Prisma.ROICalculationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ROICalculationPayload>[]
          }
          create: {
            args: Prisma.ROICalculationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ROICalculationPayload>
          }
          createMany: {
            args: Prisma.ROICalculationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ROICalculationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ROICalculationPayload>[]
          }
          delete: {
            args: Prisma.ROICalculationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ROICalculationPayload>
          }
          update: {
            args: Prisma.ROICalculationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ROICalculationPayload>
          }
          deleteMany: {
            args: Prisma.ROICalculationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ROICalculationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ROICalculationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ROICalculationPayload>
          }
          aggregate: {
            args: Prisma.ROICalculationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateROICalculation>
          }
          groupBy: {
            args: Prisma.ROICalculationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ROICalculationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ROICalculationCountArgs<ExtArgs>
            result: $Utils.Optional<ROICalculationCountAggregateOutputType> | number
          }
        }
      }
      SystemNotification: {
        payload: Prisma.$SystemNotificationPayload<ExtArgs>
        fields: Prisma.SystemNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemNotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemNotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemNotificationPayload>
          }
          findFirst: {
            args: Prisma.SystemNotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemNotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemNotificationPayload>
          }
          findMany: {
            args: Prisma.SystemNotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemNotificationPayload>[]
          }
          create: {
            args: Prisma.SystemNotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemNotificationPayload>
          }
          createMany: {
            args: Prisma.SystemNotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemNotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemNotificationPayload>[]
          }
          delete: {
            args: Prisma.SystemNotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemNotificationPayload>
          }
          update: {
            args: Prisma.SystemNotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemNotificationPayload>
          }
          deleteMany: {
            args: Prisma.SystemNotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemNotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemNotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemNotificationPayload>
          }
          aggregate: {
            args: Prisma.SystemNotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemNotification>
          }
          groupBy: {
            args: Prisma.SystemNotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemNotificationCountArgs<ExtArgs>
            result: $Utils.Optional<SystemNotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    nodes: number
    roiCalculations: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | UserCountOutputTypeCountNodesArgs
    roiCalculations?: boolean | UserCountOutputTypeCountRoiCalculationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNodeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoiCalculationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ROICalculationWhereInput
  }


  /**
   * Count Type DePINProjectCountOutputType
   */

  export type DePINProjectCountOutputType = {
    nodes: number
    roiCalculations: number
  }

  export type DePINProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | DePINProjectCountOutputTypeCountNodesArgs
    roiCalculations?: boolean | DePINProjectCountOutputTypeCountRoiCalculationsArgs
  }

  // Custom InputTypes
  /**
   * DePINProjectCountOutputType without action
   */
  export type DePINProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DePINProjectCountOutputType
     */
    select?: DePINProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DePINProjectCountOutputType without action
   */
  export type DePINProjectCountOutputTypeCountNodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNodeWhereInput
  }

  /**
   * DePINProjectCountOutputType without action
   */
  export type DePINProjectCountOutputTypeCountRoiCalculationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ROICalculationWhereInput
  }


  /**
   * Count Type UserNodeCountOutputType
   */

  export type UserNodeCountOutputType = {
    performances: number
  }

  export type UserNodeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    performances?: boolean | UserNodeCountOutputTypeCountPerformancesArgs
  }

  // Custom InputTypes
  /**
   * UserNodeCountOutputType without action
   */
  export type UserNodeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNodeCountOutputType
     */
    select?: UserNodeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserNodeCountOutputType without action
   */
  export type UserNodeCountOutputTypeCountPerformancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodePerformanceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    publicKey: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
    settings: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    walletAddress: string | null
    publicKey: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
    settings: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    walletAddress: number
    publicKey: number
    createdAt: number
    updatedAt: number
    lastLogin: number
    settings: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    walletAddress?: true
    publicKey?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    settings?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    walletAddress?: true
    publicKey?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    settings?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    walletAddress?: true
    publicKey?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    settings?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    walletAddress: string
    publicKey: string
    createdAt: Date
    updatedAt: Date
    lastLogin: Date | null
    settings: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    publicKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    settings?: boolean
    nodes?: boolean | User$nodesArgs<ExtArgs>
    roiCalculations?: boolean | User$roiCalculationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    publicKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    settings?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    walletAddress?: boolean
    publicKey?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    settings?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | User$nodesArgs<ExtArgs>
    roiCalculations?: boolean | User$roiCalculationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      nodes: Prisma.$UserNodePayload<ExtArgs>[]
      roiCalculations: Prisma.$ROICalculationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      walletAddress: string
      publicKey: string
      createdAt: Date
      updatedAt: Date
      lastLogin: Date | null
      settings: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nodes<T extends User$nodesArgs<ExtArgs> = {}>(args?: Subset<T, User$nodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "findMany"> | Null>
    roiCalculations<T extends User$roiCalculationsArgs<ExtArgs> = {}>(args?: Subset<T, User$roiCalculationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ROICalculationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly walletAddress: FieldRef<"User", 'String'>
    readonly publicKey: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly settings: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.nodes
   */
  export type User$nodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeInclude<ExtArgs> | null
    where?: UserNodeWhereInput
    orderBy?: UserNodeOrderByWithRelationInput | UserNodeOrderByWithRelationInput[]
    cursor?: UserNodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserNodeScalarFieldEnum | UserNodeScalarFieldEnum[]
  }

  /**
   * User.roiCalculations
   */
  export type User$roiCalculationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationInclude<ExtArgs> | null
    where?: ROICalculationWhereInput
    orderBy?: ROICalculationOrderByWithRelationInput | ROICalculationOrderByWithRelationInput[]
    cursor?: ROICalculationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ROICalculationScalarFieldEnum | ROICalculationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model DePINProject
   */

  export type AggregateDePINProject = {
    _count: DePINProjectCountAggregateOutputType | null
    _avg: DePINProjectAvgAggregateOutputType | null
    _sum: DePINProjectSumAggregateOutputType | null
    _min: DePINProjectMinAggregateOutputType | null
    _max: DePINProjectMaxAggregateOutputType | null
  }

  export type DePINProjectAvgAggregateOutputType = {
    tokenPrice: number | null
    minInvestment: number | null
    roiPeriod: number | null
  }

  export type DePINProjectSumAggregateOutputType = {
    tokenPrice: number | null
    minInvestment: number | null
    roiPeriod: number | null
  }

  export type DePINProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    description: string | null
    blockchain: string | null
    tokenSymbol: string | null
    tokenPrice: number | null
    marketCap: string | null
    volume24h: string | null
    apy: string | null
    status: string | null
    minInvestment: number | null
    roiPeriod: number | null
    geographicFocus: string | null
    riskLevel: string | null
    hardwareRequirements: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DePINProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    description: string | null
    blockchain: string | null
    tokenSymbol: string | null
    tokenPrice: number | null
    marketCap: string | null
    volume24h: string | null
    apy: string | null
    status: string | null
    minInvestment: number | null
    roiPeriod: number | null
    geographicFocus: string | null
    riskLevel: string | null
    hardwareRequirements: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DePINProjectCountAggregateOutputType = {
    id: number
    name: number
    category: number
    description: number
    blockchain: number
    tokenSymbol: number
    tokenPrice: number
    marketCap: number
    volume24h: number
    apy: number
    status: number
    minInvestment: number
    roiPeriod: number
    geographicFocus: number
    riskLevel: number
    hardwareRequirements: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DePINProjectAvgAggregateInputType = {
    tokenPrice?: true
    minInvestment?: true
    roiPeriod?: true
  }

  export type DePINProjectSumAggregateInputType = {
    tokenPrice?: true
    minInvestment?: true
    roiPeriod?: true
  }

  export type DePINProjectMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    blockchain?: true
    tokenSymbol?: true
    tokenPrice?: true
    marketCap?: true
    volume24h?: true
    apy?: true
    status?: true
    minInvestment?: true
    roiPeriod?: true
    geographicFocus?: true
    riskLevel?: true
    hardwareRequirements?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DePINProjectMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    blockchain?: true
    tokenSymbol?: true
    tokenPrice?: true
    marketCap?: true
    volume24h?: true
    apy?: true
    status?: true
    minInvestment?: true
    roiPeriod?: true
    geographicFocus?: true
    riskLevel?: true
    hardwareRequirements?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DePINProjectCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    blockchain?: true
    tokenSymbol?: true
    tokenPrice?: true
    marketCap?: true
    volume24h?: true
    apy?: true
    status?: true
    minInvestment?: true
    roiPeriod?: true
    geographicFocus?: true
    riskLevel?: true
    hardwareRequirements?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DePINProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DePINProject to aggregate.
     */
    where?: DePINProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DePINProjects to fetch.
     */
    orderBy?: DePINProjectOrderByWithRelationInput | DePINProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DePINProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DePINProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DePINProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DePINProjects
    **/
    _count?: true | DePINProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DePINProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DePINProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DePINProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DePINProjectMaxAggregateInputType
  }

  export type GetDePINProjectAggregateType<T extends DePINProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateDePINProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDePINProject[P]>
      : GetScalarType<T[P], AggregateDePINProject[P]>
  }




  export type DePINProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DePINProjectWhereInput
    orderBy?: DePINProjectOrderByWithAggregationInput | DePINProjectOrderByWithAggregationInput[]
    by: DePINProjectScalarFieldEnum[] | DePINProjectScalarFieldEnum
    having?: DePINProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DePINProjectCountAggregateInputType | true
    _avg?: DePINProjectAvgAggregateInputType
    _sum?: DePINProjectSumAggregateInputType
    _min?: DePINProjectMinAggregateInputType
    _max?: DePINProjectMaxAggregateInputType
  }

  export type DePINProjectGroupByOutputType = {
    id: string
    name: string
    category: string
    description: string
    blockchain: string
    tokenSymbol: string
    tokenPrice: number
    marketCap: string
    volume24h: string
    apy: string
    status: string
    minInvestment: number
    roiPeriod: number
    geographicFocus: string
    riskLevel: string
    hardwareRequirements: string
    createdAt: Date
    updatedAt: Date
    _count: DePINProjectCountAggregateOutputType | null
    _avg: DePINProjectAvgAggregateOutputType | null
    _sum: DePINProjectSumAggregateOutputType | null
    _min: DePINProjectMinAggregateOutputType | null
    _max: DePINProjectMaxAggregateOutputType | null
  }

  type GetDePINProjectGroupByPayload<T extends DePINProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DePINProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DePINProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DePINProjectGroupByOutputType[P]>
            : GetScalarType<T[P], DePINProjectGroupByOutputType[P]>
        }
      >
    >


  export type DePINProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    blockchain?: boolean
    tokenSymbol?: boolean
    tokenPrice?: boolean
    marketCap?: boolean
    volume24h?: boolean
    apy?: boolean
    status?: boolean
    minInvestment?: boolean
    roiPeriod?: boolean
    geographicFocus?: boolean
    riskLevel?: boolean
    hardwareRequirements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    nodes?: boolean | DePINProject$nodesArgs<ExtArgs>
    roiCalculations?: boolean | DePINProject$roiCalculationsArgs<ExtArgs>
    _count?: boolean | DePINProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dePINProject"]>

  export type DePINProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    blockchain?: boolean
    tokenSymbol?: boolean
    tokenPrice?: boolean
    marketCap?: boolean
    volume24h?: boolean
    apy?: boolean
    status?: boolean
    minInvestment?: boolean
    roiPeriod?: boolean
    geographicFocus?: boolean
    riskLevel?: boolean
    hardwareRequirements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["dePINProject"]>

  export type DePINProjectSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    blockchain?: boolean
    tokenSymbol?: boolean
    tokenPrice?: boolean
    marketCap?: boolean
    volume24h?: boolean
    apy?: boolean
    status?: boolean
    minInvestment?: boolean
    roiPeriod?: boolean
    geographicFocus?: boolean
    riskLevel?: boolean
    hardwareRequirements?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DePINProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nodes?: boolean | DePINProject$nodesArgs<ExtArgs>
    roiCalculations?: boolean | DePINProject$roiCalculationsArgs<ExtArgs>
    _count?: boolean | DePINProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DePINProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DePINProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DePINProject"
    objects: {
      nodes: Prisma.$UserNodePayload<ExtArgs>[]
      roiCalculations: Prisma.$ROICalculationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: string
      description: string
      blockchain: string
      tokenSymbol: string
      tokenPrice: number
      marketCap: string
      volume24h: string
      apy: string
      status: string
      minInvestment: number
      roiPeriod: number
      geographicFocus: string
      riskLevel: string
      hardwareRequirements: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dePINProject"]>
    composites: {}
  }

  type DePINProjectGetPayload<S extends boolean | null | undefined | DePINProjectDefaultArgs> = $Result.GetResult<Prisma.$DePINProjectPayload, S>

  type DePINProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DePINProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DePINProjectCountAggregateInputType | true
    }

  export interface DePINProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DePINProject'], meta: { name: 'DePINProject' } }
    /**
     * Find zero or one DePINProject that matches the filter.
     * @param {DePINProjectFindUniqueArgs} args - Arguments to find a DePINProject
     * @example
     * // Get one DePINProject
     * const dePINProject = await prisma.dePINProject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DePINProjectFindUniqueArgs>(args: SelectSubset<T, DePINProjectFindUniqueArgs<ExtArgs>>): Prisma__DePINProjectClient<$Result.GetResult<Prisma.$DePINProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DePINProject that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DePINProjectFindUniqueOrThrowArgs} args - Arguments to find a DePINProject
     * @example
     * // Get one DePINProject
     * const dePINProject = await prisma.dePINProject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DePINProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, DePINProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DePINProjectClient<$Result.GetResult<Prisma.$DePINProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DePINProject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DePINProjectFindFirstArgs} args - Arguments to find a DePINProject
     * @example
     * // Get one DePINProject
     * const dePINProject = await prisma.dePINProject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DePINProjectFindFirstArgs>(args?: SelectSubset<T, DePINProjectFindFirstArgs<ExtArgs>>): Prisma__DePINProjectClient<$Result.GetResult<Prisma.$DePINProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DePINProject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DePINProjectFindFirstOrThrowArgs} args - Arguments to find a DePINProject
     * @example
     * // Get one DePINProject
     * const dePINProject = await prisma.dePINProject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DePINProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, DePINProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__DePINProjectClient<$Result.GetResult<Prisma.$DePINProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DePINProjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DePINProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DePINProjects
     * const dePINProjects = await prisma.dePINProject.findMany()
     * 
     * // Get first 10 DePINProjects
     * const dePINProjects = await prisma.dePINProject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dePINProjectWithIdOnly = await prisma.dePINProject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DePINProjectFindManyArgs>(args?: SelectSubset<T, DePINProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DePINProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DePINProject.
     * @param {DePINProjectCreateArgs} args - Arguments to create a DePINProject.
     * @example
     * // Create one DePINProject
     * const DePINProject = await prisma.dePINProject.create({
     *   data: {
     *     // ... data to create a DePINProject
     *   }
     * })
     * 
     */
    create<T extends DePINProjectCreateArgs>(args: SelectSubset<T, DePINProjectCreateArgs<ExtArgs>>): Prisma__DePINProjectClient<$Result.GetResult<Prisma.$DePINProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DePINProjects.
     * @param {DePINProjectCreateManyArgs} args - Arguments to create many DePINProjects.
     * @example
     * // Create many DePINProjects
     * const dePINProject = await prisma.dePINProject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DePINProjectCreateManyArgs>(args?: SelectSubset<T, DePINProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DePINProjects and returns the data saved in the database.
     * @param {DePINProjectCreateManyAndReturnArgs} args - Arguments to create many DePINProjects.
     * @example
     * // Create many DePINProjects
     * const dePINProject = await prisma.dePINProject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DePINProjects and only return the `id`
     * const dePINProjectWithIdOnly = await prisma.dePINProject.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DePINProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, DePINProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DePINProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DePINProject.
     * @param {DePINProjectDeleteArgs} args - Arguments to delete one DePINProject.
     * @example
     * // Delete one DePINProject
     * const DePINProject = await prisma.dePINProject.delete({
     *   where: {
     *     // ... filter to delete one DePINProject
     *   }
     * })
     * 
     */
    delete<T extends DePINProjectDeleteArgs>(args: SelectSubset<T, DePINProjectDeleteArgs<ExtArgs>>): Prisma__DePINProjectClient<$Result.GetResult<Prisma.$DePINProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DePINProject.
     * @param {DePINProjectUpdateArgs} args - Arguments to update one DePINProject.
     * @example
     * // Update one DePINProject
     * const dePINProject = await prisma.dePINProject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DePINProjectUpdateArgs>(args: SelectSubset<T, DePINProjectUpdateArgs<ExtArgs>>): Prisma__DePINProjectClient<$Result.GetResult<Prisma.$DePINProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DePINProjects.
     * @param {DePINProjectDeleteManyArgs} args - Arguments to filter DePINProjects to delete.
     * @example
     * // Delete a few DePINProjects
     * const { count } = await prisma.dePINProject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DePINProjectDeleteManyArgs>(args?: SelectSubset<T, DePINProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DePINProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DePINProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DePINProjects
     * const dePINProject = await prisma.dePINProject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DePINProjectUpdateManyArgs>(args: SelectSubset<T, DePINProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DePINProject.
     * @param {DePINProjectUpsertArgs} args - Arguments to update or create a DePINProject.
     * @example
     * // Update or create a DePINProject
     * const dePINProject = await prisma.dePINProject.upsert({
     *   create: {
     *     // ... data to create a DePINProject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DePINProject we want to update
     *   }
     * })
     */
    upsert<T extends DePINProjectUpsertArgs>(args: SelectSubset<T, DePINProjectUpsertArgs<ExtArgs>>): Prisma__DePINProjectClient<$Result.GetResult<Prisma.$DePINProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DePINProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DePINProjectCountArgs} args - Arguments to filter DePINProjects to count.
     * @example
     * // Count the number of DePINProjects
     * const count = await prisma.dePINProject.count({
     *   where: {
     *     // ... the filter for the DePINProjects we want to count
     *   }
     * })
    **/
    count<T extends DePINProjectCountArgs>(
      args?: Subset<T, DePINProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DePINProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DePINProject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DePINProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DePINProjectAggregateArgs>(args: Subset<T, DePINProjectAggregateArgs>): Prisma.PrismaPromise<GetDePINProjectAggregateType<T>>

    /**
     * Group by DePINProject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DePINProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DePINProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DePINProjectGroupByArgs['orderBy'] }
        : { orderBy?: DePINProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DePINProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDePINProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DePINProject model
   */
  readonly fields: DePINProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DePINProject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DePINProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nodes<T extends DePINProject$nodesArgs<ExtArgs> = {}>(args?: Subset<T, DePINProject$nodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "findMany"> | Null>
    roiCalculations<T extends DePINProject$roiCalculationsArgs<ExtArgs> = {}>(args?: Subset<T, DePINProject$roiCalculationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ROICalculationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DePINProject model
   */ 
  interface DePINProjectFieldRefs {
    readonly id: FieldRef<"DePINProject", 'String'>
    readonly name: FieldRef<"DePINProject", 'String'>
    readonly category: FieldRef<"DePINProject", 'String'>
    readonly description: FieldRef<"DePINProject", 'String'>
    readonly blockchain: FieldRef<"DePINProject", 'String'>
    readonly tokenSymbol: FieldRef<"DePINProject", 'String'>
    readonly tokenPrice: FieldRef<"DePINProject", 'Float'>
    readonly marketCap: FieldRef<"DePINProject", 'String'>
    readonly volume24h: FieldRef<"DePINProject", 'String'>
    readonly apy: FieldRef<"DePINProject", 'String'>
    readonly status: FieldRef<"DePINProject", 'String'>
    readonly minInvestment: FieldRef<"DePINProject", 'Float'>
    readonly roiPeriod: FieldRef<"DePINProject", 'Int'>
    readonly geographicFocus: FieldRef<"DePINProject", 'String'>
    readonly riskLevel: FieldRef<"DePINProject", 'String'>
    readonly hardwareRequirements: FieldRef<"DePINProject", 'String'>
    readonly createdAt: FieldRef<"DePINProject", 'DateTime'>
    readonly updatedAt: FieldRef<"DePINProject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DePINProject findUnique
   */
  export type DePINProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DePINProject
     */
    select?: DePINProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DePINProjectInclude<ExtArgs> | null
    /**
     * Filter, which DePINProject to fetch.
     */
    where: DePINProjectWhereUniqueInput
  }

  /**
   * DePINProject findUniqueOrThrow
   */
  export type DePINProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DePINProject
     */
    select?: DePINProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DePINProjectInclude<ExtArgs> | null
    /**
     * Filter, which DePINProject to fetch.
     */
    where: DePINProjectWhereUniqueInput
  }

  /**
   * DePINProject findFirst
   */
  export type DePINProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DePINProject
     */
    select?: DePINProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DePINProjectInclude<ExtArgs> | null
    /**
     * Filter, which DePINProject to fetch.
     */
    where?: DePINProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DePINProjects to fetch.
     */
    orderBy?: DePINProjectOrderByWithRelationInput | DePINProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DePINProjects.
     */
    cursor?: DePINProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DePINProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DePINProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DePINProjects.
     */
    distinct?: DePINProjectScalarFieldEnum | DePINProjectScalarFieldEnum[]
  }

  /**
   * DePINProject findFirstOrThrow
   */
  export type DePINProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DePINProject
     */
    select?: DePINProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DePINProjectInclude<ExtArgs> | null
    /**
     * Filter, which DePINProject to fetch.
     */
    where?: DePINProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DePINProjects to fetch.
     */
    orderBy?: DePINProjectOrderByWithRelationInput | DePINProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DePINProjects.
     */
    cursor?: DePINProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DePINProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DePINProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DePINProjects.
     */
    distinct?: DePINProjectScalarFieldEnum | DePINProjectScalarFieldEnum[]
  }

  /**
   * DePINProject findMany
   */
  export type DePINProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DePINProject
     */
    select?: DePINProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DePINProjectInclude<ExtArgs> | null
    /**
     * Filter, which DePINProjects to fetch.
     */
    where?: DePINProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DePINProjects to fetch.
     */
    orderBy?: DePINProjectOrderByWithRelationInput | DePINProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DePINProjects.
     */
    cursor?: DePINProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DePINProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DePINProjects.
     */
    skip?: number
    distinct?: DePINProjectScalarFieldEnum | DePINProjectScalarFieldEnum[]
  }

  /**
   * DePINProject create
   */
  export type DePINProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DePINProject
     */
    select?: DePINProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DePINProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a DePINProject.
     */
    data: XOR<DePINProjectCreateInput, DePINProjectUncheckedCreateInput>
  }

  /**
   * DePINProject createMany
   */
  export type DePINProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DePINProjects.
     */
    data: DePINProjectCreateManyInput | DePINProjectCreateManyInput[]
  }

  /**
   * DePINProject createManyAndReturn
   */
  export type DePINProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DePINProject
     */
    select?: DePINProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DePINProjects.
     */
    data: DePINProjectCreateManyInput | DePINProjectCreateManyInput[]
  }

  /**
   * DePINProject update
   */
  export type DePINProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DePINProject
     */
    select?: DePINProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DePINProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a DePINProject.
     */
    data: XOR<DePINProjectUpdateInput, DePINProjectUncheckedUpdateInput>
    /**
     * Choose, which DePINProject to update.
     */
    where: DePINProjectWhereUniqueInput
  }

  /**
   * DePINProject updateMany
   */
  export type DePINProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DePINProjects.
     */
    data: XOR<DePINProjectUpdateManyMutationInput, DePINProjectUncheckedUpdateManyInput>
    /**
     * Filter which DePINProjects to update
     */
    where?: DePINProjectWhereInput
  }

  /**
   * DePINProject upsert
   */
  export type DePINProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DePINProject
     */
    select?: DePINProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DePINProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the DePINProject to update in case it exists.
     */
    where: DePINProjectWhereUniqueInput
    /**
     * In case the DePINProject found by the `where` argument doesn't exist, create a new DePINProject with this data.
     */
    create: XOR<DePINProjectCreateInput, DePINProjectUncheckedCreateInput>
    /**
     * In case the DePINProject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DePINProjectUpdateInput, DePINProjectUncheckedUpdateInput>
  }

  /**
   * DePINProject delete
   */
  export type DePINProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DePINProject
     */
    select?: DePINProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DePINProjectInclude<ExtArgs> | null
    /**
     * Filter which DePINProject to delete.
     */
    where: DePINProjectWhereUniqueInput
  }

  /**
   * DePINProject deleteMany
   */
  export type DePINProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DePINProjects to delete
     */
    where?: DePINProjectWhereInput
  }

  /**
   * DePINProject.nodes
   */
  export type DePINProject$nodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeInclude<ExtArgs> | null
    where?: UserNodeWhereInput
    orderBy?: UserNodeOrderByWithRelationInput | UserNodeOrderByWithRelationInput[]
    cursor?: UserNodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserNodeScalarFieldEnum | UserNodeScalarFieldEnum[]
  }

  /**
   * DePINProject.roiCalculations
   */
  export type DePINProject$roiCalculationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationInclude<ExtArgs> | null
    where?: ROICalculationWhereInput
    orderBy?: ROICalculationOrderByWithRelationInput | ROICalculationOrderByWithRelationInput[]
    cursor?: ROICalculationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ROICalculationScalarFieldEnum | ROICalculationScalarFieldEnum[]
  }

  /**
   * DePINProject without action
   */
  export type DePINProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DePINProject
     */
    select?: DePINProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DePINProjectInclude<ExtArgs> | null
  }


  /**
   * Model UserNode
   */

  export type AggregateUserNode = {
    _count: UserNodeCountAggregateOutputType | null
    _avg: UserNodeAvgAggregateOutputType | null
    _sum: UserNodeSumAggregateOutputType | null
    _min: UserNodeMinAggregateOutputType | null
    _max: UserNodeMaxAggregateOutputType | null
  }

  export type UserNodeAvgAggregateOutputType = {
    totalEarned: number | null
  }

  export type UserNodeSumAggregateOutputType = {
    totalEarned: number | null
  }

  export type UserNodeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    projectId: string | null
    nodeId: string | null
    type: string | null
    capacity: string | null
    location: string | null
    monitorUrl: string | null
    status: string | null
    uptime: string | null
    earnings: string | null
    totalEarned: number | null
    startDate: Date | null
    hardware: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserNodeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    projectId: string | null
    nodeId: string | null
    type: string | null
    capacity: string | null
    location: string | null
    monitorUrl: string | null
    status: string | null
    uptime: string | null
    earnings: string | null
    totalEarned: number | null
    startDate: Date | null
    hardware: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserNodeCountAggregateOutputType = {
    id: number
    userId: number
    projectId: number
    nodeId: number
    type: number
    capacity: number
    location: number
    monitorUrl: number
    status: number
    uptime: number
    earnings: number
    totalEarned: number
    startDate: number
    hardware: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserNodeAvgAggregateInputType = {
    totalEarned?: true
  }

  export type UserNodeSumAggregateInputType = {
    totalEarned?: true
  }

  export type UserNodeMinAggregateInputType = {
    id?: true
    userId?: true
    projectId?: true
    nodeId?: true
    type?: true
    capacity?: true
    location?: true
    monitorUrl?: true
    status?: true
    uptime?: true
    earnings?: true
    totalEarned?: true
    startDate?: true
    hardware?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserNodeMaxAggregateInputType = {
    id?: true
    userId?: true
    projectId?: true
    nodeId?: true
    type?: true
    capacity?: true
    location?: true
    monitorUrl?: true
    status?: true
    uptime?: true
    earnings?: true
    totalEarned?: true
    startDate?: true
    hardware?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserNodeCountAggregateInputType = {
    id?: true
    userId?: true
    projectId?: true
    nodeId?: true
    type?: true
    capacity?: true
    location?: true
    monitorUrl?: true
    status?: true
    uptime?: true
    earnings?: true
    totalEarned?: true
    startDate?: true
    hardware?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserNodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserNode to aggregate.
     */
    where?: UserNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNodes to fetch.
     */
    orderBy?: UserNodeOrderByWithRelationInput | UserNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserNodes
    **/
    _count?: true | UserNodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserNodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserNodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserNodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserNodeMaxAggregateInputType
  }

  export type GetUserNodeAggregateType<T extends UserNodeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserNode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserNode[P]>
      : GetScalarType<T[P], AggregateUserNode[P]>
  }




  export type UserNodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNodeWhereInput
    orderBy?: UserNodeOrderByWithAggregationInput | UserNodeOrderByWithAggregationInput[]
    by: UserNodeScalarFieldEnum[] | UserNodeScalarFieldEnum
    having?: UserNodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserNodeCountAggregateInputType | true
    _avg?: UserNodeAvgAggregateInputType
    _sum?: UserNodeSumAggregateInputType
    _min?: UserNodeMinAggregateInputType
    _max?: UserNodeMaxAggregateInputType
  }

  export type UserNodeGroupByOutputType = {
    id: string
    userId: string
    projectId: string
    nodeId: string
    type: string
    capacity: string | null
    location: string | null
    monitorUrl: string | null
    status: string
    uptime: string
    earnings: string
    totalEarned: number
    startDate: Date
    hardware: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserNodeCountAggregateOutputType | null
    _avg: UserNodeAvgAggregateOutputType | null
    _sum: UserNodeSumAggregateOutputType | null
    _min: UserNodeMinAggregateOutputType | null
    _max: UserNodeMaxAggregateOutputType | null
  }

  type GetUserNodeGroupByPayload<T extends UserNodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserNodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserNodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserNodeGroupByOutputType[P]>
            : GetScalarType<T[P], UserNodeGroupByOutputType[P]>
        }
      >
    >


  export type UserNodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    projectId?: boolean
    nodeId?: boolean
    type?: boolean
    capacity?: boolean
    location?: boolean
    monitorUrl?: boolean
    status?: boolean
    uptime?: boolean
    earnings?: boolean
    totalEarned?: boolean
    startDate?: boolean
    hardware?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | DePINProjectDefaultArgs<ExtArgs>
    performances?: boolean | UserNode$performancesArgs<ExtArgs>
    _count?: boolean | UserNodeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userNode"]>

  export type UserNodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    projectId?: boolean
    nodeId?: boolean
    type?: boolean
    capacity?: boolean
    location?: boolean
    monitorUrl?: boolean
    status?: boolean
    uptime?: boolean
    earnings?: boolean
    totalEarned?: boolean
    startDate?: boolean
    hardware?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | DePINProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userNode"]>

  export type UserNodeSelectScalar = {
    id?: boolean
    userId?: boolean
    projectId?: boolean
    nodeId?: boolean
    type?: boolean
    capacity?: boolean
    location?: boolean
    monitorUrl?: boolean
    status?: boolean
    uptime?: boolean
    earnings?: boolean
    totalEarned?: boolean
    startDate?: boolean
    hardware?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserNodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | DePINProjectDefaultArgs<ExtArgs>
    performances?: boolean | UserNode$performancesArgs<ExtArgs>
    _count?: boolean | UserNodeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserNodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | DePINProjectDefaultArgs<ExtArgs>
  }

  export type $UserNodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserNode"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$DePINProjectPayload<ExtArgs>
      performances: Prisma.$NodePerformancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      projectId: string
      nodeId: string
      type: string
      capacity: string | null
      location: string | null
      monitorUrl: string | null
      status: string
      uptime: string
      earnings: string
      totalEarned: number
      startDate: Date
      hardware: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userNode"]>
    composites: {}
  }

  type UserNodeGetPayload<S extends boolean | null | undefined | UserNodeDefaultArgs> = $Result.GetResult<Prisma.$UserNodePayload, S>

  type UserNodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserNodeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserNodeCountAggregateInputType | true
    }

  export interface UserNodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserNode'], meta: { name: 'UserNode' } }
    /**
     * Find zero or one UserNode that matches the filter.
     * @param {UserNodeFindUniqueArgs} args - Arguments to find a UserNode
     * @example
     * // Get one UserNode
     * const userNode = await prisma.userNode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserNodeFindUniqueArgs>(args: SelectSubset<T, UserNodeFindUniqueArgs<ExtArgs>>): Prisma__UserNodeClient<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserNode that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserNodeFindUniqueOrThrowArgs} args - Arguments to find a UserNode
     * @example
     * // Get one UserNode
     * const userNode = await prisma.userNode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserNodeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserNodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserNodeClient<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserNode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNodeFindFirstArgs} args - Arguments to find a UserNode
     * @example
     * // Get one UserNode
     * const userNode = await prisma.userNode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserNodeFindFirstArgs>(args?: SelectSubset<T, UserNodeFindFirstArgs<ExtArgs>>): Prisma__UserNodeClient<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserNode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNodeFindFirstOrThrowArgs} args - Arguments to find a UserNode
     * @example
     * // Get one UserNode
     * const userNode = await prisma.userNode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserNodeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserNodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserNodeClient<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserNodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserNodes
     * const userNodes = await prisma.userNode.findMany()
     * 
     * // Get first 10 UserNodes
     * const userNodes = await prisma.userNode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userNodeWithIdOnly = await prisma.userNode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserNodeFindManyArgs>(args?: SelectSubset<T, UserNodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserNode.
     * @param {UserNodeCreateArgs} args - Arguments to create a UserNode.
     * @example
     * // Create one UserNode
     * const UserNode = await prisma.userNode.create({
     *   data: {
     *     // ... data to create a UserNode
     *   }
     * })
     * 
     */
    create<T extends UserNodeCreateArgs>(args: SelectSubset<T, UserNodeCreateArgs<ExtArgs>>): Prisma__UserNodeClient<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserNodes.
     * @param {UserNodeCreateManyArgs} args - Arguments to create many UserNodes.
     * @example
     * // Create many UserNodes
     * const userNode = await prisma.userNode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserNodeCreateManyArgs>(args?: SelectSubset<T, UserNodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserNodes and returns the data saved in the database.
     * @param {UserNodeCreateManyAndReturnArgs} args - Arguments to create many UserNodes.
     * @example
     * // Create many UserNodes
     * const userNode = await prisma.userNode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserNodes and only return the `id`
     * const userNodeWithIdOnly = await prisma.userNode.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserNodeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserNodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserNode.
     * @param {UserNodeDeleteArgs} args - Arguments to delete one UserNode.
     * @example
     * // Delete one UserNode
     * const UserNode = await prisma.userNode.delete({
     *   where: {
     *     // ... filter to delete one UserNode
     *   }
     * })
     * 
     */
    delete<T extends UserNodeDeleteArgs>(args: SelectSubset<T, UserNodeDeleteArgs<ExtArgs>>): Prisma__UserNodeClient<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserNode.
     * @param {UserNodeUpdateArgs} args - Arguments to update one UserNode.
     * @example
     * // Update one UserNode
     * const userNode = await prisma.userNode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserNodeUpdateArgs>(args: SelectSubset<T, UserNodeUpdateArgs<ExtArgs>>): Prisma__UserNodeClient<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserNodes.
     * @param {UserNodeDeleteManyArgs} args - Arguments to filter UserNodes to delete.
     * @example
     * // Delete a few UserNodes
     * const { count } = await prisma.userNode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserNodeDeleteManyArgs>(args?: SelectSubset<T, UserNodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserNodes
     * const userNode = await prisma.userNode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserNodeUpdateManyArgs>(args: SelectSubset<T, UserNodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserNode.
     * @param {UserNodeUpsertArgs} args - Arguments to update or create a UserNode.
     * @example
     * // Update or create a UserNode
     * const userNode = await prisma.userNode.upsert({
     *   create: {
     *     // ... data to create a UserNode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserNode we want to update
     *   }
     * })
     */
    upsert<T extends UserNodeUpsertArgs>(args: SelectSubset<T, UserNodeUpsertArgs<ExtArgs>>): Prisma__UserNodeClient<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserNodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNodeCountArgs} args - Arguments to filter UserNodes to count.
     * @example
     * // Count the number of UserNodes
     * const count = await prisma.userNode.count({
     *   where: {
     *     // ... the filter for the UserNodes we want to count
     *   }
     * })
    **/
    count<T extends UserNodeCountArgs>(
      args?: Subset<T, UserNodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserNodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserNodeAggregateArgs>(args: Subset<T, UserNodeAggregateArgs>): Prisma.PrismaPromise<GetUserNodeAggregateType<T>>

    /**
     * Group by UserNode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserNodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserNodeGroupByArgs['orderBy'] }
        : { orderBy?: UserNodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserNodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserNodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserNode model
   */
  readonly fields: UserNodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserNode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserNodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends DePINProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DePINProjectDefaultArgs<ExtArgs>>): Prisma__DePINProjectClient<$Result.GetResult<Prisma.$DePINProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    performances<T extends UserNode$performancesArgs<ExtArgs> = {}>(args?: Subset<T, UserNode$performancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodePerformancePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserNode model
   */ 
  interface UserNodeFieldRefs {
    readonly id: FieldRef<"UserNode", 'String'>
    readonly userId: FieldRef<"UserNode", 'String'>
    readonly projectId: FieldRef<"UserNode", 'String'>
    readonly nodeId: FieldRef<"UserNode", 'String'>
    readonly type: FieldRef<"UserNode", 'String'>
    readonly capacity: FieldRef<"UserNode", 'String'>
    readonly location: FieldRef<"UserNode", 'String'>
    readonly monitorUrl: FieldRef<"UserNode", 'String'>
    readonly status: FieldRef<"UserNode", 'String'>
    readonly uptime: FieldRef<"UserNode", 'String'>
    readonly earnings: FieldRef<"UserNode", 'String'>
    readonly totalEarned: FieldRef<"UserNode", 'Float'>
    readonly startDate: FieldRef<"UserNode", 'DateTime'>
    readonly hardware: FieldRef<"UserNode", 'String'>
    readonly createdAt: FieldRef<"UserNode", 'DateTime'>
    readonly updatedAt: FieldRef<"UserNode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserNode findUnique
   */
  export type UserNodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeInclude<ExtArgs> | null
    /**
     * Filter, which UserNode to fetch.
     */
    where: UserNodeWhereUniqueInput
  }

  /**
   * UserNode findUniqueOrThrow
   */
  export type UserNodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeInclude<ExtArgs> | null
    /**
     * Filter, which UserNode to fetch.
     */
    where: UserNodeWhereUniqueInput
  }

  /**
   * UserNode findFirst
   */
  export type UserNodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeInclude<ExtArgs> | null
    /**
     * Filter, which UserNode to fetch.
     */
    where?: UserNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNodes to fetch.
     */
    orderBy?: UserNodeOrderByWithRelationInput | UserNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserNodes.
     */
    cursor?: UserNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserNodes.
     */
    distinct?: UserNodeScalarFieldEnum | UserNodeScalarFieldEnum[]
  }

  /**
   * UserNode findFirstOrThrow
   */
  export type UserNodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeInclude<ExtArgs> | null
    /**
     * Filter, which UserNode to fetch.
     */
    where?: UserNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNodes to fetch.
     */
    orderBy?: UserNodeOrderByWithRelationInput | UserNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserNodes.
     */
    cursor?: UserNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserNodes.
     */
    distinct?: UserNodeScalarFieldEnum | UserNodeScalarFieldEnum[]
  }

  /**
   * UserNode findMany
   */
  export type UserNodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeInclude<ExtArgs> | null
    /**
     * Filter, which UserNodes to fetch.
     */
    where?: UserNodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNodes to fetch.
     */
    orderBy?: UserNodeOrderByWithRelationInput | UserNodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserNodes.
     */
    cursor?: UserNodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNodes.
     */
    skip?: number
    distinct?: UserNodeScalarFieldEnum | UserNodeScalarFieldEnum[]
  }

  /**
   * UserNode create
   */
  export type UserNodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserNode.
     */
    data: XOR<UserNodeCreateInput, UserNodeUncheckedCreateInput>
  }

  /**
   * UserNode createMany
   */
  export type UserNodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserNodes.
     */
    data: UserNodeCreateManyInput | UserNodeCreateManyInput[]
  }

  /**
   * UserNode createManyAndReturn
   */
  export type UserNodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserNodes.
     */
    data: UserNodeCreateManyInput | UserNodeCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserNode update
   */
  export type UserNodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserNode.
     */
    data: XOR<UserNodeUpdateInput, UserNodeUncheckedUpdateInput>
    /**
     * Choose, which UserNode to update.
     */
    where: UserNodeWhereUniqueInput
  }

  /**
   * UserNode updateMany
   */
  export type UserNodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserNodes.
     */
    data: XOR<UserNodeUpdateManyMutationInput, UserNodeUncheckedUpdateManyInput>
    /**
     * Filter which UserNodes to update
     */
    where?: UserNodeWhereInput
  }

  /**
   * UserNode upsert
   */
  export type UserNodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserNode to update in case it exists.
     */
    where: UserNodeWhereUniqueInput
    /**
     * In case the UserNode found by the `where` argument doesn't exist, create a new UserNode with this data.
     */
    create: XOR<UserNodeCreateInput, UserNodeUncheckedCreateInput>
    /**
     * In case the UserNode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserNodeUpdateInput, UserNodeUncheckedUpdateInput>
  }

  /**
   * UserNode delete
   */
  export type UserNodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeInclude<ExtArgs> | null
    /**
     * Filter which UserNode to delete.
     */
    where: UserNodeWhereUniqueInput
  }

  /**
   * UserNode deleteMany
   */
  export type UserNodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserNodes to delete
     */
    where?: UserNodeWhereInput
  }

  /**
   * UserNode.performances
   */
  export type UserNode$performancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodePerformance
     */
    select?: NodePerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodePerformanceInclude<ExtArgs> | null
    where?: NodePerformanceWhereInput
    orderBy?: NodePerformanceOrderByWithRelationInput | NodePerformanceOrderByWithRelationInput[]
    cursor?: NodePerformanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NodePerformanceScalarFieldEnum | NodePerformanceScalarFieldEnum[]
  }

  /**
   * UserNode without action
   */
  export type UserNodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNode
     */
    select?: UserNodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNodeInclude<ExtArgs> | null
  }


  /**
   * Model NodePerformance
   */

  export type AggregateNodePerformance = {
    _count: NodePerformanceCountAggregateOutputType | null
    _avg: NodePerformanceAvgAggregateOutputType | null
    _sum: NodePerformanceSumAggregateOutputType | null
    _min: NodePerformanceMinAggregateOutputType | null
    _max: NodePerformanceMaxAggregateOutputType | null
  }

  export type NodePerformanceAvgAggregateOutputType = {
    cpuUsage: number | null
    memoryUsage: number | null
    diskUsage: number | null
    networkLatency: number | null
    bandwidthUp: number | null
    bandwidthDown: number | null
  }

  export type NodePerformanceSumAggregateOutputType = {
    cpuUsage: number | null
    memoryUsage: number | null
    diskUsage: number | null
    networkLatency: number | null
    bandwidthUp: number | null
    bandwidthDown: number | null
  }

  export type NodePerformanceMinAggregateOutputType = {
    id: string | null
    nodeId: string | null
    cpuUsage: number | null
    memoryUsage: number | null
    diskUsage: number | null
    networkLatency: number | null
    bandwidthUp: number | null
    bandwidthDown: number | null
    timestamp: Date | null
  }

  export type NodePerformanceMaxAggregateOutputType = {
    id: string | null
    nodeId: string | null
    cpuUsage: number | null
    memoryUsage: number | null
    diskUsage: number | null
    networkLatency: number | null
    bandwidthUp: number | null
    bandwidthDown: number | null
    timestamp: Date | null
  }

  export type NodePerformanceCountAggregateOutputType = {
    id: number
    nodeId: number
    cpuUsage: number
    memoryUsage: number
    diskUsage: number
    networkLatency: number
    bandwidthUp: number
    bandwidthDown: number
    timestamp: number
    _all: number
  }


  export type NodePerformanceAvgAggregateInputType = {
    cpuUsage?: true
    memoryUsage?: true
    diskUsage?: true
    networkLatency?: true
    bandwidthUp?: true
    bandwidthDown?: true
  }

  export type NodePerformanceSumAggregateInputType = {
    cpuUsage?: true
    memoryUsage?: true
    diskUsage?: true
    networkLatency?: true
    bandwidthUp?: true
    bandwidthDown?: true
  }

  export type NodePerformanceMinAggregateInputType = {
    id?: true
    nodeId?: true
    cpuUsage?: true
    memoryUsage?: true
    diskUsage?: true
    networkLatency?: true
    bandwidthUp?: true
    bandwidthDown?: true
    timestamp?: true
  }

  export type NodePerformanceMaxAggregateInputType = {
    id?: true
    nodeId?: true
    cpuUsage?: true
    memoryUsage?: true
    diskUsage?: true
    networkLatency?: true
    bandwidthUp?: true
    bandwidthDown?: true
    timestamp?: true
  }

  export type NodePerformanceCountAggregateInputType = {
    id?: true
    nodeId?: true
    cpuUsage?: true
    memoryUsage?: true
    diskUsage?: true
    networkLatency?: true
    bandwidthUp?: true
    bandwidthDown?: true
    timestamp?: true
    _all?: true
  }

  export type NodePerformanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NodePerformance to aggregate.
     */
    where?: NodePerformanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodePerformances to fetch.
     */
    orderBy?: NodePerformanceOrderByWithRelationInput | NodePerformanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NodePerformanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodePerformances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodePerformances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NodePerformances
    **/
    _count?: true | NodePerformanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NodePerformanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NodePerformanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NodePerformanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NodePerformanceMaxAggregateInputType
  }

  export type GetNodePerformanceAggregateType<T extends NodePerformanceAggregateArgs> = {
        [P in keyof T & keyof AggregateNodePerformance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNodePerformance[P]>
      : GetScalarType<T[P], AggregateNodePerformance[P]>
  }




  export type NodePerformanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NodePerformanceWhereInput
    orderBy?: NodePerformanceOrderByWithAggregationInput | NodePerformanceOrderByWithAggregationInput[]
    by: NodePerformanceScalarFieldEnum[] | NodePerformanceScalarFieldEnum
    having?: NodePerformanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NodePerformanceCountAggregateInputType | true
    _avg?: NodePerformanceAvgAggregateInputType
    _sum?: NodePerformanceSumAggregateInputType
    _min?: NodePerformanceMinAggregateInputType
    _max?: NodePerformanceMaxAggregateInputType
  }

  export type NodePerformanceGroupByOutputType = {
    id: string
    nodeId: string
    cpuUsage: number
    memoryUsage: number
    diskUsage: number
    networkLatency: number
    bandwidthUp: number
    bandwidthDown: number
    timestamp: Date
    _count: NodePerformanceCountAggregateOutputType | null
    _avg: NodePerformanceAvgAggregateOutputType | null
    _sum: NodePerformanceSumAggregateOutputType | null
    _min: NodePerformanceMinAggregateOutputType | null
    _max: NodePerformanceMaxAggregateOutputType | null
  }

  type GetNodePerformanceGroupByPayload<T extends NodePerformanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NodePerformanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NodePerformanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NodePerformanceGroupByOutputType[P]>
            : GetScalarType<T[P], NodePerformanceGroupByOutputType[P]>
        }
      >
    >


  export type NodePerformanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nodeId?: boolean
    cpuUsage?: boolean
    memoryUsage?: boolean
    diskUsage?: boolean
    networkLatency?: boolean
    bandwidthUp?: boolean
    bandwidthDown?: boolean
    timestamp?: boolean
    node?: boolean | UserNodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nodePerformance"]>

  export type NodePerformanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nodeId?: boolean
    cpuUsage?: boolean
    memoryUsage?: boolean
    diskUsage?: boolean
    networkLatency?: boolean
    bandwidthUp?: boolean
    bandwidthDown?: boolean
    timestamp?: boolean
    node?: boolean | UserNodeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nodePerformance"]>

  export type NodePerformanceSelectScalar = {
    id?: boolean
    nodeId?: boolean
    cpuUsage?: boolean
    memoryUsage?: boolean
    diskUsage?: boolean
    networkLatency?: boolean
    bandwidthUp?: boolean
    bandwidthDown?: boolean
    timestamp?: boolean
  }

  export type NodePerformanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    node?: boolean | UserNodeDefaultArgs<ExtArgs>
  }
  export type NodePerformanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    node?: boolean | UserNodeDefaultArgs<ExtArgs>
  }

  export type $NodePerformancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NodePerformance"
    objects: {
      node: Prisma.$UserNodePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nodeId: string
      cpuUsage: number
      memoryUsage: number
      diskUsage: number
      networkLatency: number
      bandwidthUp: number
      bandwidthDown: number
      timestamp: Date
    }, ExtArgs["result"]["nodePerformance"]>
    composites: {}
  }

  type NodePerformanceGetPayload<S extends boolean | null | undefined | NodePerformanceDefaultArgs> = $Result.GetResult<Prisma.$NodePerformancePayload, S>

  type NodePerformanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NodePerformanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NodePerformanceCountAggregateInputType | true
    }

  export interface NodePerformanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NodePerformance'], meta: { name: 'NodePerformance' } }
    /**
     * Find zero or one NodePerformance that matches the filter.
     * @param {NodePerformanceFindUniqueArgs} args - Arguments to find a NodePerformance
     * @example
     * // Get one NodePerformance
     * const nodePerformance = await prisma.nodePerformance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NodePerformanceFindUniqueArgs>(args: SelectSubset<T, NodePerformanceFindUniqueArgs<ExtArgs>>): Prisma__NodePerformanceClient<$Result.GetResult<Prisma.$NodePerformancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NodePerformance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NodePerformanceFindUniqueOrThrowArgs} args - Arguments to find a NodePerformance
     * @example
     * // Get one NodePerformance
     * const nodePerformance = await prisma.nodePerformance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NodePerformanceFindUniqueOrThrowArgs>(args: SelectSubset<T, NodePerformanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NodePerformanceClient<$Result.GetResult<Prisma.$NodePerformancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NodePerformance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodePerformanceFindFirstArgs} args - Arguments to find a NodePerformance
     * @example
     * // Get one NodePerformance
     * const nodePerformance = await prisma.nodePerformance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NodePerformanceFindFirstArgs>(args?: SelectSubset<T, NodePerformanceFindFirstArgs<ExtArgs>>): Prisma__NodePerformanceClient<$Result.GetResult<Prisma.$NodePerformancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NodePerformance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodePerformanceFindFirstOrThrowArgs} args - Arguments to find a NodePerformance
     * @example
     * // Get one NodePerformance
     * const nodePerformance = await prisma.nodePerformance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NodePerformanceFindFirstOrThrowArgs>(args?: SelectSubset<T, NodePerformanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__NodePerformanceClient<$Result.GetResult<Prisma.$NodePerformancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NodePerformances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodePerformanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NodePerformances
     * const nodePerformances = await prisma.nodePerformance.findMany()
     * 
     * // Get first 10 NodePerformances
     * const nodePerformances = await prisma.nodePerformance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nodePerformanceWithIdOnly = await prisma.nodePerformance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NodePerformanceFindManyArgs>(args?: SelectSubset<T, NodePerformanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodePerformancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NodePerformance.
     * @param {NodePerformanceCreateArgs} args - Arguments to create a NodePerformance.
     * @example
     * // Create one NodePerformance
     * const NodePerformance = await prisma.nodePerformance.create({
     *   data: {
     *     // ... data to create a NodePerformance
     *   }
     * })
     * 
     */
    create<T extends NodePerformanceCreateArgs>(args: SelectSubset<T, NodePerformanceCreateArgs<ExtArgs>>): Prisma__NodePerformanceClient<$Result.GetResult<Prisma.$NodePerformancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NodePerformances.
     * @param {NodePerformanceCreateManyArgs} args - Arguments to create many NodePerformances.
     * @example
     * // Create many NodePerformances
     * const nodePerformance = await prisma.nodePerformance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NodePerformanceCreateManyArgs>(args?: SelectSubset<T, NodePerformanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NodePerformances and returns the data saved in the database.
     * @param {NodePerformanceCreateManyAndReturnArgs} args - Arguments to create many NodePerformances.
     * @example
     * // Create many NodePerformances
     * const nodePerformance = await prisma.nodePerformance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NodePerformances and only return the `id`
     * const nodePerformanceWithIdOnly = await prisma.nodePerformance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NodePerformanceCreateManyAndReturnArgs>(args?: SelectSubset<T, NodePerformanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NodePerformancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a NodePerformance.
     * @param {NodePerformanceDeleteArgs} args - Arguments to delete one NodePerformance.
     * @example
     * // Delete one NodePerformance
     * const NodePerformance = await prisma.nodePerformance.delete({
     *   where: {
     *     // ... filter to delete one NodePerformance
     *   }
     * })
     * 
     */
    delete<T extends NodePerformanceDeleteArgs>(args: SelectSubset<T, NodePerformanceDeleteArgs<ExtArgs>>): Prisma__NodePerformanceClient<$Result.GetResult<Prisma.$NodePerformancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NodePerformance.
     * @param {NodePerformanceUpdateArgs} args - Arguments to update one NodePerformance.
     * @example
     * // Update one NodePerformance
     * const nodePerformance = await prisma.nodePerformance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NodePerformanceUpdateArgs>(args: SelectSubset<T, NodePerformanceUpdateArgs<ExtArgs>>): Prisma__NodePerformanceClient<$Result.GetResult<Prisma.$NodePerformancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NodePerformances.
     * @param {NodePerformanceDeleteManyArgs} args - Arguments to filter NodePerformances to delete.
     * @example
     * // Delete a few NodePerformances
     * const { count } = await prisma.nodePerformance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NodePerformanceDeleteManyArgs>(args?: SelectSubset<T, NodePerformanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NodePerformances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodePerformanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NodePerformances
     * const nodePerformance = await prisma.nodePerformance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NodePerformanceUpdateManyArgs>(args: SelectSubset<T, NodePerformanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NodePerformance.
     * @param {NodePerformanceUpsertArgs} args - Arguments to update or create a NodePerformance.
     * @example
     * // Update or create a NodePerformance
     * const nodePerformance = await prisma.nodePerformance.upsert({
     *   create: {
     *     // ... data to create a NodePerformance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NodePerformance we want to update
     *   }
     * })
     */
    upsert<T extends NodePerformanceUpsertArgs>(args: SelectSubset<T, NodePerformanceUpsertArgs<ExtArgs>>): Prisma__NodePerformanceClient<$Result.GetResult<Prisma.$NodePerformancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NodePerformances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodePerformanceCountArgs} args - Arguments to filter NodePerformances to count.
     * @example
     * // Count the number of NodePerformances
     * const count = await prisma.nodePerformance.count({
     *   where: {
     *     // ... the filter for the NodePerformances we want to count
     *   }
     * })
    **/
    count<T extends NodePerformanceCountArgs>(
      args?: Subset<T, NodePerformanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NodePerformanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NodePerformance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodePerformanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NodePerformanceAggregateArgs>(args: Subset<T, NodePerformanceAggregateArgs>): Prisma.PrismaPromise<GetNodePerformanceAggregateType<T>>

    /**
     * Group by NodePerformance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NodePerformanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NodePerformanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NodePerformanceGroupByArgs['orderBy'] }
        : { orderBy?: NodePerformanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NodePerformanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNodePerformanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NodePerformance model
   */
  readonly fields: NodePerformanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NodePerformance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NodePerformanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    node<T extends UserNodeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserNodeDefaultArgs<ExtArgs>>): Prisma__UserNodeClient<$Result.GetResult<Prisma.$UserNodePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NodePerformance model
   */ 
  interface NodePerformanceFieldRefs {
    readonly id: FieldRef<"NodePerformance", 'String'>
    readonly nodeId: FieldRef<"NodePerformance", 'String'>
    readonly cpuUsage: FieldRef<"NodePerformance", 'Float'>
    readonly memoryUsage: FieldRef<"NodePerformance", 'Float'>
    readonly diskUsage: FieldRef<"NodePerformance", 'Float'>
    readonly networkLatency: FieldRef<"NodePerformance", 'Float'>
    readonly bandwidthUp: FieldRef<"NodePerformance", 'Float'>
    readonly bandwidthDown: FieldRef<"NodePerformance", 'Float'>
    readonly timestamp: FieldRef<"NodePerformance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NodePerformance findUnique
   */
  export type NodePerformanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodePerformance
     */
    select?: NodePerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodePerformanceInclude<ExtArgs> | null
    /**
     * Filter, which NodePerformance to fetch.
     */
    where: NodePerformanceWhereUniqueInput
  }

  /**
   * NodePerformance findUniqueOrThrow
   */
  export type NodePerformanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodePerformance
     */
    select?: NodePerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodePerformanceInclude<ExtArgs> | null
    /**
     * Filter, which NodePerformance to fetch.
     */
    where: NodePerformanceWhereUniqueInput
  }

  /**
   * NodePerformance findFirst
   */
  export type NodePerformanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodePerformance
     */
    select?: NodePerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodePerformanceInclude<ExtArgs> | null
    /**
     * Filter, which NodePerformance to fetch.
     */
    where?: NodePerformanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodePerformances to fetch.
     */
    orderBy?: NodePerformanceOrderByWithRelationInput | NodePerformanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NodePerformances.
     */
    cursor?: NodePerformanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodePerformances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodePerformances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NodePerformances.
     */
    distinct?: NodePerformanceScalarFieldEnum | NodePerformanceScalarFieldEnum[]
  }

  /**
   * NodePerformance findFirstOrThrow
   */
  export type NodePerformanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodePerformance
     */
    select?: NodePerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodePerformanceInclude<ExtArgs> | null
    /**
     * Filter, which NodePerformance to fetch.
     */
    where?: NodePerformanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodePerformances to fetch.
     */
    orderBy?: NodePerformanceOrderByWithRelationInput | NodePerformanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NodePerformances.
     */
    cursor?: NodePerformanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodePerformances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodePerformances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NodePerformances.
     */
    distinct?: NodePerformanceScalarFieldEnum | NodePerformanceScalarFieldEnum[]
  }

  /**
   * NodePerformance findMany
   */
  export type NodePerformanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodePerformance
     */
    select?: NodePerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodePerformanceInclude<ExtArgs> | null
    /**
     * Filter, which NodePerformances to fetch.
     */
    where?: NodePerformanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NodePerformances to fetch.
     */
    orderBy?: NodePerformanceOrderByWithRelationInput | NodePerformanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NodePerformances.
     */
    cursor?: NodePerformanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NodePerformances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NodePerformances.
     */
    skip?: number
    distinct?: NodePerformanceScalarFieldEnum | NodePerformanceScalarFieldEnum[]
  }

  /**
   * NodePerformance create
   */
  export type NodePerformanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodePerformance
     */
    select?: NodePerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodePerformanceInclude<ExtArgs> | null
    /**
     * The data needed to create a NodePerformance.
     */
    data: XOR<NodePerformanceCreateInput, NodePerformanceUncheckedCreateInput>
  }

  /**
   * NodePerformance createMany
   */
  export type NodePerformanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NodePerformances.
     */
    data: NodePerformanceCreateManyInput | NodePerformanceCreateManyInput[]
  }

  /**
   * NodePerformance createManyAndReturn
   */
  export type NodePerformanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodePerformance
     */
    select?: NodePerformanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NodePerformances.
     */
    data: NodePerformanceCreateManyInput | NodePerformanceCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodePerformanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NodePerformance update
   */
  export type NodePerformanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodePerformance
     */
    select?: NodePerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodePerformanceInclude<ExtArgs> | null
    /**
     * The data needed to update a NodePerformance.
     */
    data: XOR<NodePerformanceUpdateInput, NodePerformanceUncheckedUpdateInput>
    /**
     * Choose, which NodePerformance to update.
     */
    where: NodePerformanceWhereUniqueInput
  }

  /**
   * NodePerformance updateMany
   */
  export type NodePerformanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NodePerformances.
     */
    data: XOR<NodePerformanceUpdateManyMutationInput, NodePerformanceUncheckedUpdateManyInput>
    /**
     * Filter which NodePerformances to update
     */
    where?: NodePerformanceWhereInput
  }

  /**
   * NodePerformance upsert
   */
  export type NodePerformanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodePerformance
     */
    select?: NodePerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodePerformanceInclude<ExtArgs> | null
    /**
     * The filter to search for the NodePerformance to update in case it exists.
     */
    where: NodePerformanceWhereUniqueInput
    /**
     * In case the NodePerformance found by the `where` argument doesn't exist, create a new NodePerformance with this data.
     */
    create: XOR<NodePerformanceCreateInput, NodePerformanceUncheckedCreateInput>
    /**
     * In case the NodePerformance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NodePerformanceUpdateInput, NodePerformanceUncheckedUpdateInput>
  }

  /**
   * NodePerformance delete
   */
  export type NodePerformanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodePerformance
     */
    select?: NodePerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodePerformanceInclude<ExtArgs> | null
    /**
     * Filter which NodePerformance to delete.
     */
    where: NodePerformanceWhereUniqueInput
  }

  /**
   * NodePerformance deleteMany
   */
  export type NodePerformanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NodePerformances to delete
     */
    where?: NodePerformanceWhereInput
  }

  /**
   * NodePerformance without action
   */
  export type NodePerformanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NodePerformance
     */
    select?: NodePerformanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NodePerformanceInclude<ExtArgs> | null
  }


  /**
   * Model ROICalculation
   */

  export type AggregateROICalculation = {
    _count: ROICalculationCountAggregateOutputType | null
    _avg: ROICalculationAvgAggregateOutputType | null
    _sum: ROICalculationSumAggregateOutputType | null
    _min: ROICalculationMinAggregateOutputType | null
    _max: ROICalculationMaxAggregateOutputType | null
  }

  export type ROICalculationAvgAggregateOutputType = {
    hardwareCost: number | null
    monthlyCost: number | null
    estimatedMonthlyReward: number | null
    roiMonths: number | null
    annualROI: number | null
  }

  export type ROICalculationSumAggregateOutputType = {
    hardwareCost: number | null
    monthlyCost: number | null
    estimatedMonthlyReward: number | null
    roiMonths: number | null
    annualROI: number | null
  }

  export type ROICalculationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    projectId: string | null
    location: string | null
    hardwareCost: number | null
    monthlyCost: number | null
    estimatedMonthlyReward: number | null
    roiMonths: number | null
    annualROI: number | null
    riskFactors: string | null
    createdAt: Date | null
  }

  export type ROICalculationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    projectId: string | null
    location: string | null
    hardwareCost: number | null
    monthlyCost: number | null
    estimatedMonthlyReward: number | null
    roiMonths: number | null
    annualROI: number | null
    riskFactors: string | null
    createdAt: Date | null
  }

  export type ROICalculationCountAggregateOutputType = {
    id: number
    userId: number
    projectId: number
    location: number
    hardwareCost: number
    monthlyCost: number
    estimatedMonthlyReward: number
    roiMonths: number
    annualROI: number
    riskFactors: number
    createdAt: number
    _all: number
  }


  export type ROICalculationAvgAggregateInputType = {
    hardwareCost?: true
    monthlyCost?: true
    estimatedMonthlyReward?: true
    roiMonths?: true
    annualROI?: true
  }

  export type ROICalculationSumAggregateInputType = {
    hardwareCost?: true
    monthlyCost?: true
    estimatedMonthlyReward?: true
    roiMonths?: true
    annualROI?: true
  }

  export type ROICalculationMinAggregateInputType = {
    id?: true
    userId?: true
    projectId?: true
    location?: true
    hardwareCost?: true
    monthlyCost?: true
    estimatedMonthlyReward?: true
    roiMonths?: true
    annualROI?: true
    riskFactors?: true
    createdAt?: true
  }

  export type ROICalculationMaxAggregateInputType = {
    id?: true
    userId?: true
    projectId?: true
    location?: true
    hardwareCost?: true
    monthlyCost?: true
    estimatedMonthlyReward?: true
    roiMonths?: true
    annualROI?: true
    riskFactors?: true
    createdAt?: true
  }

  export type ROICalculationCountAggregateInputType = {
    id?: true
    userId?: true
    projectId?: true
    location?: true
    hardwareCost?: true
    monthlyCost?: true
    estimatedMonthlyReward?: true
    roiMonths?: true
    annualROI?: true
    riskFactors?: true
    createdAt?: true
    _all?: true
  }

  export type ROICalculationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ROICalculation to aggregate.
     */
    where?: ROICalculationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ROICalculations to fetch.
     */
    orderBy?: ROICalculationOrderByWithRelationInput | ROICalculationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ROICalculationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ROICalculations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ROICalculations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ROICalculations
    **/
    _count?: true | ROICalculationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ROICalculationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ROICalculationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ROICalculationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ROICalculationMaxAggregateInputType
  }

  export type GetROICalculationAggregateType<T extends ROICalculationAggregateArgs> = {
        [P in keyof T & keyof AggregateROICalculation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateROICalculation[P]>
      : GetScalarType<T[P], AggregateROICalculation[P]>
  }




  export type ROICalculationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ROICalculationWhereInput
    orderBy?: ROICalculationOrderByWithAggregationInput | ROICalculationOrderByWithAggregationInput[]
    by: ROICalculationScalarFieldEnum[] | ROICalculationScalarFieldEnum
    having?: ROICalculationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ROICalculationCountAggregateInputType | true
    _avg?: ROICalculationAvgAggregateInputType
    _sum?: ROICalculationSumAggregateInputType
    _min?: ROICalculationMinAggregateInputType
    _max?: ROICalculationMaxAggregateInputType
  }

  export type ROICalculationGroupByOutputType = {
    id: string
    userId: string
    projectId: string
    location: string
    hardwareCost: number
    monthlyCost: number
    estimatedMonthlyReward: number
    roiMonths: number
    annualROI: number
    riskFactors: string
    createdAt: Date
    _count: ROICalculationCountAggregateOutputType | null
    _avg: ROICalculationAvgAggregateOutputType | null
    _sum: ROICalculationSumAggregateOutputType | null
    _min: ROICalculationMinAggregateOutputType | null
    _max: ROICalculationMaxAggregateOutputType | null
  }

  type GetROICalculationGroupByPayload<T extends ROICalculationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ROICalculationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ROICalculationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ROICalculationGroupByOutputType[P]>
            : GetScalarType<T[P], ROICalculationGroupByOutputType[P]>
        }
      >
    >


  export type ROICalculationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    projectId?: boolean
    location?: boolean
    hardwareCost?: boolean
    monthlyCost?: boolean
    estimatedMonthlyReward?: boolean
    roiMonths?: boolean
    annualROI?: boolean
    riskFactors?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | DePINProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rOICalculation"]>

  export type ROICalculationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    projectId?: boolean
    location?: boolean
    hardwareCost?: boolean
    monthlyCost?: boolean
    estimatedMonthlyReward?: boolean
    roiMonths?: boolean
    annualROI?: boolean
    riskFactors?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | DePINProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rOICalculation"]>

  export type ROICalculationSelectScalar = {
    id?: boolean
    userId?: boolean
    projectId?: boolean
    location?: boolean
    hardwareCost?: boolean
    monthlyCost?: boolean
    estimatedMonthlyReward?: boolean
    roiMonths?: boolean
    annualROI?: boolean
    riskFactors?: boolean
    createdAt?: boolean
  }

  export type ROICalculationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | DePINProjectDefaultArgs<ExtArgs>
  }
  export type ROICalculationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | DePINProjectDefaultArgs<ExtArgs>
  }

  export type $ROICalculationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ROICalculation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$DePINProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      projectId: string
      location: string
      hardwareCost: number
      monthlyCost: number
      estimatedMonthlyReward: number
      roiMonths: number
      annualROI: number
      riskFactors: string
      createdAt: Date
    }, ExtArgs["result"]["rOICalculation"]>
    composites: {}
  }

  type ROICalculationGetPayload<S extends boolean | null | undefined | ROICalculationDefaultArgs> = $Result.GetResult<Prisma.$ROICalculationPayload, S>

  type ROICalculationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ROICalculationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ROICalculationCountAggregateInputType | true
    }

  export interface ROICalculationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ROICalculation'], meta: { name: 'ROICalculation' } }
    /**
     * Find zero or one ROICalculation that matches the filter.
     * @param {ROICalculationFindUniqueArgs} args - Arguments to find a ROICalculation
     * @example
     * // Get one ROICalculation
     * const rOICalculation = await prisma.rOICalculation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ROICalculationFindUniqueArgs>(args: SelectSubset<T, ROICalculationFindUniqueArgs<ExtArgs>>): Prisma__ROICalculationClient<$Result.GetResult<Prisma.$ROICalculationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ROICalculation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ROICalculationFindUniqueOrThrowArgs} args - Arguments to find a ROICalculation
     * @example
     * // Get one ROICalculation
     * const rOICalculation = await prisma.rOICalculation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ROICalculationFindUniqueOrThrowArgs>(args: SelectSubset<T, ROICalculationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ROICalculationClient<$Result.GetResult<Prisma.$ROICalculationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ROICalculation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ROICalculationFindFirstArgs} args - Arguments to find a ROICalculation
     * @example
     * // Get one ROICalculation
     * const rOICalculation = await prisma.rOICalculation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ROICalculationFindFirstArgs>(args?: SelectSubset<T, ROICalculationFindFirstArgs<ExtArgs>>): Prisma__ROICalculationClient<$Result.GetResult<Prisma.$ROICalculationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ROICalculation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ROICalculationFindFirstOrThrowArgs} args - Arguments to find a ROICalculation
     * @example
     * // Get one ROICalculation
     * const rOICalculation = await prisma.rOICalculation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ROICalculationFindFirstOrThrowArgs>(args?: SelectSubset<T, ROICalculationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ROICalculationClient<$Result.GetResult<Prisma.$ROICalculationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ROICalculations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ROICalculationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ROICalculations
     * const rOICalculations = await prisma.rOICalculation.findMany()
     * 
     * // Get first 10 ROICalculations
     * const rOICalculations = await prisma.rOICalculation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rOICalculationWithIdOnly = await prisma.rOICalculation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ROICalculationFindManyArgs>(args?: SelectSubset<T, ROICalculationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ROICalculationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ROICalculation.
     * @param {ROICalculationCreateArgs} args - Arguments to create a ROICalculation.
     * @example
     * // Create one ROICalculation
     * const ROICalculation = await prisma.rOICalculation.create({
     *   data: {
     *     // ... data to create a ROICalculation
     *   }
     * })
     * 
     */
    create<T extends ROICalculationCreateArgs>(args: SelectSubset<T, ROICalculationCreateArgs<ExtArgs>>): Prisma__ROICalculationClient<$Result.GetResult<Prisma.$ROICalculationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ROICalculations.
     * @param {ROICalculationCreateManyArgs} args - Arguments to create many ROICalculations.
     * @example
     * // Create many ROICalculations
     * const rOICalculation = await prisma.rOICalculation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ROICalculationCreateManyArgs>(args?: SelectSubset<T, ROICalculationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ROICalculations and returns the data saved in the database.
     * @param {ROICalculationCreateManyAndReturnArgs} args - Arguments to create many ROICalculations.
     * @example
     * // Create many ROICalculations
     * const rOICalculation = await prisma.rOICalculation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ROICalculations and only return the `id`
     * const rOICalculationWithIdOnly = await prisma.rOICalculation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ROICalculationCreateManyAndReturnArgs>(args?: SelectSubset<T, ROICalculationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ROICalculationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ROICalculation.
     * @param {ROICalculationDeleteArgs} args - Arguments to delete one ROICalculation.
     * @example
     * // Delete one ROICalculation
     * const ROICalculation = await prisma.rOICalculation.delete({
     *   where: {
     *     // ... filter to delete one ROICalculation
     *   }
     * })
     * 
     */
    delete<T extends ROICalculationDeleteArgs>(args: SelectSubset<T, ROICalculationDeleteArgs<ExtArgs>>): Prisma__ROICalculationClient<$Result.GetResult<Prisma.$ROICalculationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ROICalculation.
     * @param {ROICalculationUpdateArgs} args - Arguments to update one ROICalculation.
     * @example
     * // Update one ROICalculation
     * const rOICalculation = await prisma.rOICalculation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ROICalculationUpdateArgs>(args: SelectSubset<T, ROICalculationUpdateArgs<ExtArgs>>): Prisma__ROICalculationClient<$Result.GetResult<Prisma.$ROICalculationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ROICalculations.
     * @param {ROICalculationDeleteManyArgs} args - Arguments to filter ROICalculations to delete.
     * @example
     * // Delete a few ROICalculations
     * const { count } = await prisma.rOICalculation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ROICalculationDeleteManyArgs>(args?: SelectSubset<T, ROICalculationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ROICalculations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ROICalculationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ROICalculations
     * const rOICalculation = await prisma.rOICalculation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ROICalculationUpdateManyArgs>(args: SelectSubset<T, ROICalculationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ROICalculation.
     * @param {ROICalculationUpsertArgs} args - Arguments to update or create a ROICalculation.
     * @example
     * // Update or create a ROICalculation
     * const rOICalculation = await prisma.rOICalculation.upsert({
     *   create: {
     *     // ... data to create a ROICalculation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ROICalculation we want to update
     *   }
     * })
     */
    upsert<T extends ROICalculationUpsertArgs>(args: SelectSubset<T, ROICalculationUpsertArgs<ExtArgs>>): Prisma__ROICalculationClient<$Result.GetResult<Prisma.$ROICalculationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ROICalculations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ROICalculationCountArgs} args - Arguments to filter ROICalculations to count.
     * @example
     * // Count the number of ROICalculations
     * const count = await prisma.rOICalculation.count({
     *   where: {
     *     // ... the filter for the ROICalculations we want to count
     *   }
     * })
    **/
    count<T extends ROICalculationCountArgs>(
      args?: Subset<T, ROICalculationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ROICalculationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ROICalculation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ROICalculationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ROICalculationAggregateArgs>(args: Subset<T, ROICalculationAggregateArgs>): Prisma.PrismaPromise<GetROICalculationAggregateType<T>>

    /**
     * Group by ROICalculation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ROICalculationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ROICalculationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ROICalculationGroupByArgs['orderBy'] }
        : { orderBy?: ROICalculationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ROICalculationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetROICalculationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ROICalculation model
   */
  readonly fields: ROICalculationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ROICalculation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ROICalculationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends DePINProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DePINProjectDefaultArgs<ExtArgs>>): Prisma__DePINProjectClient<$Result.GetResult<Prisma.$DePINProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ROICalculation model
   */ 
  interface ROICalculationFieldRefs {
    readonly id: FieldRef<"ROICalculation", 'String'>
    readonly userId: FieldRef<"ROICalculation", 'String'>
    readonly projectId: FieldRef<"ROICalculation", 'String'>
    readonly location: FieldRef<"ROICalculation", 'String'>
    readonly hardwareCost: FieldRef<"ROICalculation", 'Float'>
    readonly monthlyCost: FieldRef<"ROICalculation", 'Float'>
    readonly estimatedMonthlyReward: FieldRef<"ROICalculation", 'Float'>
    readonly roiMonths: FieldRef<"ROICalculation", 'Float'>
    readonly annualROI: FieldRef<"ROICalculation", 'Float'>
    readonly riskFactors: FieldRef<"ROICalculation", 'String'>
    readonly createdAt: FieldRef<"ROICalculation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ROICalculation findUnique
   */
  export type ROICalculationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationInclude<ExtArgs> | null
    /**
     * Filter, which ROICalculation to fetch.
     */
    where: ROICalculationWhereUniqueInput
  }

  /**
   * ROICalculation findUniqueOrThrow
   */
  export type ROICalculationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationInclude<ExtArgs> | null
    /**
     * Filter, which ROICalculation to fetch.
     */
    where: ROICalculationWhereUniqueInput
  }

  /**
   * ROICalculation findFirst
   */
  export type ROICalculationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationInclude<ExtArgs> | null
    /**
     * Filter, which ROICalculation to fetch.
     */
    where?: ROICalculationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ROICalculations to fetch.
     */
    orderBy?: ROICalculationOrderByWithRelationInput | ROICalculationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ROICalculations.
     */
    cursor?: ROICalculationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ROICalculations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ROICalculations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ROICalculations.
     */
    distinct?: ROICalculationScalarFieldEnum | ROICalculationScalarFieldEnum[]
  }

  /**
   * ROICalculation findFirstOrThrow
   */
  export type ROICalculationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationInclude<ExtArgs> | null
    /**
     * Filter, which ROICalculation to fetch.
     */
    where?: ROICalculationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ROICalculations to fetch.
     */
    orderBy?: ROICalculationOrderByWithRelationInput | ROICalculationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ROICalculations.
     */
    cursor?: ROICalculationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ROICalculations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ROICalculations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ROICalculations.
     */
    distinct?: ROICalculationScalarFieldEnum | ROICalculationScalarFieldEnum[]
  }

  /**
   * ROICalculation findMany
   */
  export type ROICalculationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationInclude<ExtArgs> | null
    /**
     * Filter, which ROICalculations to fetch.
     */
    where?: ROICalculationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ROICalculations to fetch.
     */
    orderBy?: ROICalculationOrderByWithRelationInput | ROICalculationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ROICalculations.
     */
    cursor?: ROICalculationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ROICalculations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ROICalculations.
     */
    skip?: number
    distinct?: ROICalculationScalarFieldEnum | ROICalculationScalarFieldEnum[]
  }

  /**
   * ROICalculation create
   */
  export type ROICalculationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationInclude<ExtArgs> | null
    /**
     * The data needed to create a ROICalculation.
     */
    data: XOR<ROICalculationCreateInput, ROICalculationUncheckedCreateInput>
  }

  /**
   * ROICalculation createMany
   */
  export type ROICalculationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ROICalculations.
     */
    data: ROICalculationCreateManyInput | ROICalculationCreateManyInput[]
  }

  /**
   * ROICalculation createManyAndReturn
   */
  export type ROICalculationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ROICalculations.
     */
    data: ROICalculationCreateManyInput | ROICalculationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ROICalculation update
   */
  export type ROICalculationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationInclude<ExtArgs> | null
    /**
     * The data needed to update a ROICalculation.
     */
    data: XOR<ROICalculationUpdateInput, ROICalculationUncheckedUpdateInput>
    /**
     * Choose, which ROICalculation to update.
     */
    where: ROICalculationWhereUniqueInput
  }

  /**
   * ROICalculation updateMany
   */
  export type ROICalculationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ROICalculations.
     */
    data: XOR<ROICalculationUpdateManyMutationInput, ROICalculationUncheckedUpdateManyInput>
    /**
     * Filter which ROICalculations to update
     */
    where?: ROICalculationWhereInput
  }

  /**
   * ROICalculation upsert
   */
  export type ROICalculationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationInclude<ExtArgs> | null
    /**
     * The filter to search for the ROICalculation to update in case it exists.
     */
    where: ROICalculationWhereUniqueInput
    /**
     * In case the ROICalculation found by the `where` argument doesn't exist, create a new ROICalculation with this data.
     */
    create: XOR<ROICalculationCreateInput, ROICalculationUncheckedCreateInput>
    /**
     * In case the ROICalculation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ROICalculationUpdateInput, ROICalculationUncheckedUpdateInput>
  }

  /**
   * ROICalculation delete
   */
  export type ROICalculationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationInclude<ExtArgs> | null
    /**
     * Filter which ROICalculation to delete.
     */
    where: ROICalculationWhereUniqueInput
  }

  /**
   * ROICalculation deleteMany
   */
  export type ROICalculationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ROICalculations to delete
     */
    where?: ROICalculationWhereInput
  }

  /**
   * ROICalculation without action
   */
  export type ROICalculationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ROICalculation
     */
    select?: ROICalculationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ROICalculationInclude<ExtArgs> | null
  }


  /**
   * Model SystemNotification
   */

  export type AggregateSystemNotification = {
    _count: SystemNotificationCountAggregateOutputType | null
    _min: SystemNotificationMinAggregateOutputType | null
    _max: SystemNotificationMaxAggregateOutputType | null
  }

  export type SystemNotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    data: string | null
    createdAt: Date | null
  }

  export type SystemNotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    data: string | null
    createdAt: Date | null
  }

  export type SystemNotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    isRead: number
    data: number
    createdAt: number
    _all: number
  }


  export type SystemNotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    data?: true
    createdAt?: true
  }

  export type SystemNotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    data?: true
    createdAt?: true
  }

  export type SystemNotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    data?: true
    createdAt?: true
    _all?: true
  }

  export type SystemNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemNotification to aggregate.
     */
    where?: SystemNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemNotifications to fetch.
     */
    orderBy?: SystemNotificationOrderByWithRelationInput | SystemNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemNotifications
    **/
    _count?: true | SystemNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemNotificationMaxAggregateInputType
  }

  export type GetSystemNotificationAggregateType<T extends SystemNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemNotification[P]>
      : GetScalarType<T[P], AggregateSystemNotification[P]>
  }




  export type SystemNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemNotificationWhereInput
    orderBy?: SystemNotificationOrderByWithAggregationInput | SystemNotificationOrderByWithAggregationInput[]
    by: SystemNotificationScalarFieldEnum[] | SystemNotificationScalarFieldEnum
    having?: SystemNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemNotificationCountAggregateInputType | true
    _min?: SystemNotificationMinAggregateInputType
    _max?: SystemNotificationMaxAggregateInputType
  }

  export type SystemNotificationGroupByOutputType = {
    id: string
    userId: string | null
    type: string
    title: string
    message: string
    isRead: boolean
    data: string | null
    createdAt: Date
    _count: SystemNotificationCountAggregateOutputType | null
    _min: SystemNotificationMinAggregateOutputType | null
    _max: SystemNotificationMaxAggregateOutputType | null
  }

  type GetSystemNotificationGroupByPayload<T extends SystemNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], SystemNotificationGroupByOutputType[P]>
        }
      >
    >


  export type SystemNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    data?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["systemNotification"]>

  export type SystemNotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    data?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["systemNotification"]>

  export type SystemNotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    data?: boolean
    createdAt?: boolean
  }


  export type $SystemNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemNotification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      type: string
      title: string
      message: string
      isRead: boolean
      data: string | null
      createdAt: Date
    }, ExtArgs["result"]["systemNotification"]>
    composites: {}
  }

  type SystemNotificationGetPayload<S extends boolean | null | undefined | SystemNotificationDefaultArgs> = $Result.GetResult<Prisma.$SystemNotificationPayload, S>

  type SystemNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SystemNotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SystemNotificationCountAggregateInputType | true
    }

  export interface SystemNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemNotification'], meta: { name: 'SystemNotification' } }
    /**
     * Find zero or one SystemNotification that matches the filter.
     * @param {SystemNotificationFindUniqueArgs} args - Arguments to find a SystemNotification
     * @example
     * // Get one SystemNotification
     * const systemNotification = await prisma.systemNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemNotificationFindUniqueArgs>(args: SelectSubset<T, SystemNotificationFindUniqueArgs<ExtArgs>>): Prisma__SystemNotificationClient<$Result.GetResult<Prisma.$SystemNotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SystemNotification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SystemNotificationFindUniqueOrThrowArgs} args - Arguments to find a SystemNotification
     * @example
     * // Get one SystemNotification
     * const systemNotification = await prisma.systemNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemNotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemNotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemNotificationClient<$Result.GetResult<Prisma.$SystemNotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SystemNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemNotificationFindFirstArgs} args - Arguments to find a SystemNotification
     * @example
     * // Get one SystemNotification
     * const systemNotification = await prisma.systemNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemNotificationFindFirstArgs>(args?: SelectSubset<T, SystemNotificationFindFirstArgs<ExtArgs>>): Prisma__SystemNotificationClient<$Result.GetResult<Prisma.$SystemNotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SystemNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemNotificationFindFirstOrThrowArgs} args - Arguments to find a SystemNotification
     * @example
     * // Get one SystemNotification
     * const systemNotification = await prisma.systemNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemNotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemNotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemNotificationClient<$Result.GetResult<Prisma.$SystemNotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SystemNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemNotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemNotifications
     * const systemNotifications = await prisma.systemNotification.findMany()
     * 
     * // Get first 10 SystemNotifications
     * const systemNotifications = await prisma.systemNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemNotificationWithIdOnly = await prisma.systemNotification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemNotificationFindManyArgs>(args?: SelectSubset<T, SystemNotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemNotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SystemNotification.
     * @param {SystemNotificationCreateArgs} args - Arguments to create a SystemNotification.
     * @example
     * // Create one SystemNotification
     * const SystemNotification = await prisma.systemNotification.create({
     *   data: {
     *     // ... data to create a SystemNotification
     *   }
     * })
     * 
     */
    create<T extends SystemNotificationCreateArgs>(args: SelectSubset<T, SystemNotificationCreateArgs<ExtArgs>>): Prisma__SystemNotificationClient<$Result.GetResult<Prisma.$SystemNotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SystemNotifications.
     * @param {SystemNotificationCreateManyArgs} args - Arguments to create many SystemNotifications.
     * @example
     * // Create many SystemNotifications
     * const systemNotification = await prisma.systemNotification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemNotificationCreateManyArgs>(args?: SelectSubset<T, SystemNotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemNotifications and returns the data saved in the database.
     * @param {SystemNotificationCreateManyAndReturnArgs} args - Arguments to create many SystemNotifications.
     * @example
     * // Create many SystemNotifications
     * const systemNotification = await prisma.systemNotification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemNotifications and only return the `id`
     * const systemNotificationWithIdOnly = await prisma.systemNotification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemNotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemNotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemNotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SystemNotification.
     * @param {SystemNotificationDeleteArgs} args - Arguments to delete one SystemNotification.
     * @example
     * // Delete one SystemNotification
     * const SystemNotification = await prisma.systemNotification.delete({
     *   where: {
     *     // ... filter to delete one SystemNotification
     *   }
     * })
     * 
     */
    delete<T extends SystemNotificationDeleteArgs>(args: SelectSubset<T, SystemNotificationDeleteArgs<ExtArgs>>): Prisma__SystemNotificationClient<$Result.GetResult<Prisma.$SystemNotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SystemNotification.
     * @param {SystemNotificationUpdateArgs} args - Arguments to update one SystemNotification.
     * @example
     * // Update one SystemNotification
     * const systemNotification = await prisma.systemNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemNotificationUpdateArgs>(args: SelectSubset<T, SystemNotificationUpdateArgs<ExtArgs>>): Prisma__SystemNotificationClient<$Result.GetResult<Prisma.$SystemNotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SystemNotifications.
     * @param {SystemNotificationDeleteManyArgs} args - Arguments to filter SystemNotifications to delete.
     * @example
     * // Delete a few SystemNotifications
     * const { count } = await prisma.systemNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemNotificationDeleteManyArgs>(args?: SelectSubset<T, SystemNotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemNotifications
     * const systemNotification = await prisma.systemNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemNotificationUpdateManyArgs>(args: SelectSubset<T, SystemNotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemNotification.
     * @param {SystemNotificationUpsertArgs} args - Arguments to update or create a SystemNotification.
     * @example
     * // Update or create a SystemNotification
     * const systemNotification = await prisma.systemNotification.upsert({
     *   create: {
     *     // ... data to create a SystemNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemNotification we want to update
     *   }
     * })
     */
    upsert<T extends SystemNotificationUpsertArgs>(args: SelectSubset<T, SystemNotificationUpsertArgs<ExtArgs>>): Prisma__SystemNotificationClient<$Result.GetResult<Prisma.$SystemNotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SystemNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemNotificationCountArgs} args - Arguments to filter SystemNotifications to count.
     * @example
     * // Count the number of SystemNotifications
     * const count = await prisma.systemNotification.count({
     *   where: {
     *     // ... the filter for the SystemNotifications we want to count
     *   }
     * })
    **/
    count<T extends SystemNotificationCountArgs>(
      args?: Subset<T, SystemNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemNotificationAggregateArgs>(args: Subset<T, SystemNotificationAggregateArgs>): Prisma.PrismaPromise<GetSystemNotificationAggregateType<T>>

    /**
     * Group by SystemNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemNotificationGroupByArgs['orderBy'] }
        : { orderBy?: SystemNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemNotification model
   */
  readonly fields: SystemNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemNotification model
   */ 
  interface SystemNotificationFieldRefs {
    readonly id: FieldRef<"SystemNotification", 'String'>
    readonly userId: FieldRef<"SystemNotification", 'String'>
    readonly type: FieldRef<"SystemNotification", 'String'>
    readonly title: FieldRef<"SystemNotification", 'String'>
    readonly message: FieldRef<"SystemNotification", 'String'>
    readonly isRead: FieldRef<"SystemNotification", 'Boolean'>
    readonly data: FieldRef<"SystemNotification", 'String'>
    readonly createdAt: FieldRef<"SystemNotification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemNotification findUnique
   */
  export type SystemNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemNotification
     */
    select?: SystemNotificationSelect<ExtArgs> | null
    /**
     * Filter, which SystemNotification to fetch.
     */
    where: SystemNotificationWhereUniqueInput
  }

  /**
   * SystemNotification findUniqueOrThrow
   */
  export type SystemNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemNotification
     */
    select?: SystemNotificationSelect<ExtArgs> | null
    /**
     * Filter, which SystemNotification to fetch.
     */
    where: SystemNotificationWhereUniqueInput
  }

  /**
   * SystemNotification findFirst
   */
  export type SystemNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemNotification
     */
    select?: SystemNotificationSelect<ExtArgs> | null
    /**
     * Filter, which SystemNotification to fetch.
     */
    where?: SystemNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemNotifications to fetch.
     */
    orderBy?: SystemNotificationOrderByWithRelationInput | SystemNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemNotifications.
     */
    cursor?: SystemNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemNotifications.
     */
    distinct?: SystemNotificationScalarFieldEnum | SystemNotificationScalarFieldEnum[]
  }

  /**
   * SystemNotification findFirstOrThrow
   */
  export type SystemNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemNotification
     */
    select?: SystemNotificationSelect<ExtArgs> | null
    /**
     * Filter, which SystemNotification to fetch.
     */
    where?: SystemNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemNotifications to fetch.
     */
    orderBy?: SystemNotificationOrderByWithRelationInput | SystemNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemNotifications.
     */
    cursor?: SystemNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemNotifications.
     */
    distinct?: SystemNotificationScalarFieldEnum | SystemNotificationScalarFieldEnum[]
  }

  /**
   * SystemNotification findMany
   */
  export type SystemNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemNotification
     */
    select?: SystemNotificationSelect<ExtArgs> | null
    /**
     * Filter, which SystemNotifications to fetch.
     */
    where?: SystemNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemNotifications to fetch.
     */
    orderBy?: SystemNotificationOrderByWithRelationInput | SystemNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemNotifications.
     */
    cursor?: SystemNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemNotifications.
     */
    skip?: number
    distinct?: SystemNotificationScalarFieldEnum | SystemNotificationScalarFieldEnum[]
  }

  /**
   * SystemNotification create
   */
  export type SystemNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemNotification
     */
    select?: SystemNotificationSelect<ExtArgs> | null
    /**
     * The data needed to create a SystemNotification.
     */
    data: XOR<SystemNotificationCreateInput, SystemNotificationUncheckedCreateInput>
  }

  /**
   * SystemNotification createMany
   */
  export type SystemNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemNotifications.
     */
    data: SystemNotificationCreateManyInput | SystemNotificationCreateManyInput[]
  }

  /**
   * SystemNotification createManyAndReturn
   */
  export type SystemNotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemNotification
     */
    select?: SystemNotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SystemNotifications.
     */
    data: SystemNotificationCreateManyInput | SystemNotificationCreateManyInput[]
  }

  /**
   * SystemNotification update
   */
  export type SystemNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemNotification
     */
    select?: SystemNotificationSelect<ExtArgs> | null
    /**
     * The data needed to update a SystemNotification.
     */
    data: XOR<SystemNotificationUpdateInput, SystemNotificationUncheckedUpdateInput>
    /**
     * Choose, which SystemNotification to update.
     */
    where: SystemNotificationWhereUniqueInput
  }

  /**
   * SystemNotification updateMany
   */
  export type SystemNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemNotifications.
     */
    data: XOR<SystemNotificationUpdateManyMutationInput, SystemNotificationUncheckedUpdateManyInput>
    /**
     * Filter which SystemNotifications to update
     */
    where?: SystemNotificationWhereInput
  }

  /**
   * SystemNotification upsert
   */
  export type SystemNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemNotification
     */
    select?: SystemNotificationSelect<ExtArgs> | null
    /**
     * The filter to search for the SystemNotification to update in case it exists.
     */
    where: SystemNotificationWhereUniqueInput
    /**
     * In case the SystemNotification found by the `where` argument doesn't exist, create a new SystemNotification with this data.
     */
    create: XOR<SystemNotificationCreateInput, SystemNotificationUncheckedCreateInput>
    /**
     * In case the SystemNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemNotificationUpdateInput, SystemNotificationUncheckedUpdateInput>
  }

  /**
   * SystemNotification delete
   */
  export type SystemNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemNotification
     */
    select?: SystemNotificationSelect<ExtArgs> | null
    /**
     * Filter which SystemNotification to delete.
     */
    where: SystemNotificationWhereUniqueInput
  }

  /**
   * SystemNotification deleteMany
   */
  export type SystemNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemNotifications to delete
     */
    where?: SystemNotificationWhereInput
  }

  /**
   * SystemNotification without action
   */
  export type SystemNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemNotification
     */
    select?: SystemNotificationSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    walletAddress: 'walletAddress',
    publicKey: 'publicKey',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLogin: 'lastLogin',
    settings: 'settings'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const DePINProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    description: 'description',
    blockchain: 'blockchain',
    tokenSymbol: 'tokenSymbol',
    tokenPrice: 'tokenPrice',
    marketCap: 'marketCap',
    volume24h: 'volume24h',
    apy: 'apy',
    status: 'status',
    minInvestment: 'minInvestment',
    roiPeriod: 'roiPeriod',
    geographicFocus: 'geographicFocus',
    riskLevel: 'riskLevel',
    hardwareRequirements: 'hardwareRequirements',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DePINProjectScalarFieldEnum = (typeof DePINProjectScalarFieldEnum)[keyof typeof DePINProjectScalarFieldEnum]


  export const UserNodeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    projectId: 'projectId',
    nodeId: 'nodeId',
    type: 'type',
    capacity: 'capacity',
    location: 'location',
    monitorUrl: 'monitorUrl',
    status: 'status',
    uptime: 'uptime',
    earnings: 'earnings',
    totalEarned: 'totalEarned',
    startDate: 'startDate',
    hardware: 'hardware',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserNodeScalarFieldEnum = (typeof UserNodeScalarFieldEnum)[keyof typeof UserNodeScalarFieldEnum]


  export const NodePerformanceScalarFieldEnum: {
    id: 'id',
    nodeId: 'nodeId',
    cpuUsage: 'cpuUsage',
    memoryUsage: 'memoryUsage',
    diskUsage: 'diskUsage',
    networkLatency: 'networkLatency',
    bandwidthUp: 'bandwidthUp',
    bandwidthDown: 'bandwidthDown',
    timestamp: 'timestamp'
  };

  export type NodePerformanceScalarFieldEnum = (typeof NodePerformanceScalarFieldEnum)[keyof typeof NodePerformanceScalarFieldEnum]


  export const ROICalculationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    projectId: 'projectId',
    location: 'location',
    hardwareCost: 'hardwareCost',
    monthlyCost: 'monthlyCost',
    estimatedMonthlyReward: 'estimatedMonthlyReward',
    roiMonths: 'roiMonths',
    annualROI: 'annualROI',
    riskFactors: 'riskFactors',
    createdAt: 'createdAt'
  };

  export type ROICalculationScalarFieldEnum = (typeof ROICalculationScalarFieldEnum)[keyof typeof ROICalculationScalarFieldEnum]


  export const SystemNotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    isRead: 'isRead',
    data: 'data',
    createdAt: 'createdAt'
  };

  export type SystemNotificationScalarFieldEnum = (typeof SystemNotificationScalarFieldEnum)[keyof typeof SystemNotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    walletAddress?: StringFilter<"User"> | string
    publicKey?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    settings?: StringNullableFilter<"User"> | string | null
    nodes?: UserNodeListRelationFilter
    roiCalculations?: ROICalculationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    publicKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    settings?: SortOrderInput | SortOrder
    nodes?: UserNodeOrderByRelationAggregateInput
    roiCalculations?: ROICalculationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    walletAddress?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    publicKey?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    settings?: StringNullableFilter<"User"> | string | null
    nodes?: UserNodeListRelationFilter
    roiCalculations?: ROICalculationListRelationFilter
  }, "id" | "walletAddress">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    publicKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    settings?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    walletAddress?: StringWithAggregatesFilter<"User"> | string
    publicKey?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    settings?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type DePINProjectWhereInput = {
    AND?: DePINProjectWhereInput | DePINProjectWhereInput[]
    OR?: DePINProjectWhereInput[]
    NOT?: DePINProjectWhereInput | DePINProjectWhereInput[]
    id?: StringFilter<"DePINProject"> | string
    name?: StringFilter<"DePINProject"> | string
    category?: StringFilter<"DePINProject"> | string
    description?: StringFilter<"DePINProject"> | string
    blockchain?: StringFilter<"DePINProject"> | string
    tokenSymbol?: StringFilter<"DePINProject"> | string
    tokenPrice?: FloatFilter<"DePINProject"> | number
    marketCap?: StringFilter<"DePINProject"> | string
    volume24h?: StringFilter<"DePINProject"> | string
    apy?: StringFilter<"DePINProject"> | string
    status?: StringFilter<"DePINProject"> | string
    minInvestment?: FloatFilter<"DePINProject"> | number
    roiPeriod?: IntFilter<"DePINProject"> | number
    geographicFocus?: StringFilter<"DePINProject"> | string
    riskLevel?: StringFilter<"DePINProject"> | string
    hardwareRequirements?: StringFilter<"DePINProject"> | string
    createdAt?: DateTimeFilter<"DePINProject"> | Date | string
    updatedAt?: DateTimeFilter<"DePINProject"> | Date | string
    nodes?: UserNodeListRelationFilter
    roiCalculations?: ROICalculationListRelationFilter
  }

  export type DePINProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    blockchain?: SortOrder
    tokenSymbol?: SortOrder
    tokenPrice?: SortOrder
    marketCap?: SortOrder
    volume24h?: SortOrder
    apy?: SortOrder
    status?: SortOrder
    minInvestment?: SortOrder
    roiPeriod?: SortOrder
    geographicFocus?: SortOrder
    riskLevel?: SortOrder
    hardwareRequirements?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    nodes?: UserNodeOrderByRelationAggregateInput
    roiCalculations?: ROICalculationOrderByRelationAggregateInput
  }

  export type DePINProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: DePINProjectWhereInput | DePINProjectWhereInput[]
    OR?: DePINProjectWhereInput[]
    NOT?: DePINProjectWhereInput | DePINProjectWhereInput[]
    category?: StringFilter<"DePINProject"> | string
    description?: StringFilter<"DePINProject"> | string
    blockchain?: StringFilter<"DePINProject"> | string
    tokenSymbol?: StringFilter<"DePINProject"> | string
    tokenPrice?: FloatFilter<"DePINProject"> | number
    marketCap?: StringFilter<"DePINProject"> | string
    volume24h?: StringFilter<"DePINProject"> | string
    apy?: StringFilter<"DePINProject"> | string
    status?: StringFilter<"DePINProject"> | string
    minInvestment?: FloatFilter<"DePINProject"> | number
    roiPeriod?: IntFilter<"DePINProject"> | number
    geographicFocus?: StringFilter<"DePINProject"> | string
    riskLevel?: StringFilter<"DePINProject"> | string
    hardwareRequirements?: StringFilter<"DePINProject"> | string
    createdAt?: DateTimeFilter<"DePINProject"> | Date | string
    updatedAt?: DateTimeFilter<"DePINProject"> | Date | string
    nodes?: UserNodeListRelationFilter
    roiCalculations?: ROICalculationListRelationFilter
  }, "id" | "name">

  export type DePINProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    blockchain?: SortOrder
    tokenSymbol?: SortOrder
    tokenPrice?: SortOrder
    marketCap?: SortOrder
    volume24h?: SortOrder
    apy?: SortOrder
    status?: SortOrder
    minInvestment?: SortOrder
    roiPeriod?: SortOrder
    geographicFocus?: SortOrder
    riskLevel?: SortOrder
    hardwareRequirements?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DePINProjectCountOrderByAggregateInput
    _avg?: DePINProjectAvgOrderByAggregateInput
    _max?: DePINProjectMaxOrderByAggregateInput
    _min?: DePINProjectMinOrderByAggregateInput
    _sum?: DePINProjectSumOrderByAggregateInput
  }

  export type DePINProjectScalarWhereWithAggregatesInput = {
    AND?: DePINProjectScalarWhereWithAggregatesInput | DePINProjectScalarWhereWithAggregatesInput[]
    OR?: DePINProjectScalarWhereWithAggregatesInput[]
    NOT?: DePINProjectScalarWhereWithAggregatesInput | DePINProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DePINProject"> | string
    name?: StringWithAggregatesFilter<"DePINProject"> | string
    category?: StringWithAggregatesFilter<"DePINProject"> | string
    description?: StringWithAggregatesFilter<"DePINProject"> | string
    blockchain?: StringWithAggregatesFilter<"DePINProject"> | string
    tokenSymbol?: StringWithAggregatesFilter<"DePINProject"> | string
    tokenPrice?: FloatWithAggregatesFilter<"DePINProject"> | number
    marketCap?: StringWithAggregatesFilter<"DePINProject"> | string
    volume24h?: StringWithAggregatesFilter<"DePINProject"> | string
    apy?: StringWithAggregatesFilter<"DePINProject"> | string
    status?: StringWithAggregatesFilter<"DePINProject"> | string
    minInvestment?: FloatWithAggregatesFilter<"DePINProject"> | number
    roiPeriod?: IntWithAggregatesFilter<"DePINProject"> | number
    geographicFocus?: StringWithAggregatesFilter<"DePINProject"> | string
    riskLevel?: StringWithAggregatesFilter<"DePINProject"> | string
    hardwareRequirements?: StringWithAggregatesFilter<"DePINProject"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DePINProject"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DePINProject"> | Date | string
  }

  export type UserNodeWhereInput = {
    AND?: UserNodeWhereInput | UserNodeWhereInput[]
    OR?: UserNodeWhereInput[]
    NOT?: UserNodeWhereInput | UserNodeWhereInput[]
    id?: StringFilter<"UserNode"> | string
    userId?: StringFilter<"UserNode"> | string
    projectId?: StringFilter<"UserNode"> | string
    nodeId?: StringFilter<"UserNode"> | string
    type?: StringFilter<"UserNode"> | string
    capacity?: StringNullableFilter<"UserNode"> | string | null
    location?: StringNullableFilter<"UserNode"> | string | null
    monitorUrl?: StringNullableFilter<"UserNode"> | string | null
    status?: StringFilter<"UserNode"> | string
    uptime?: StringFilter<"UserNode"> | string
    earnings?: StringFilter<"UserNode"> | string
    totalEarned?: FloatFilter<"UserNode"> | number
    startDate?: DateTimeFilter<"UserNode"> | Date | string
    hardware?: StringNullableFilter<"UserNode"> | string | null
    createdAt?: DateTimeFilter<"UserNode"> | Date | string
    updatedAt?: DateTimeFilter<"UserNode"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<DePINProjectRelationFilter, DePINProjectWhereInput>
    performances?: NodePerformanceListRelationFilter
  }

  export type UserNodeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    nodeId?: SortOrder
    type?: SortOrder
    capacity?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    monitorUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    uptime?: SortOrder
    earnings?: SortOrder
    totalEarned?: SortOrder
    startDate?: SortOrder
    hardware?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    project?: DePINProjectOrderByWithRelationInput
    performances?: NodePerformanceOrderByRelationAggregateInput
  }

  export type UserNodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_nodeId?: UserNodeUserIdNodeIdCompoundUniqueInput
    AND?: UserNodeWhereInput | UserNodeWhereInput[]
    OR?: UserNodeWhereInput[]
    NOT?: UserNodeWhereInput | UserNodeWhereInput[]
    userId?: StringFilter<"UserNode"> | string
    projectId?: StringFilter<"UserNode"> | string
    nodeId?: StringFilter<"UserNode"> | string
    type?: StringFilter<"UserNode"> | string
    capacity?: StringNullableFilter<"UserNode"> | string | null
    location?: StringNullableFilter<"UserNode"> | string | null
    monitorUrl?: StringNullableFilter<"UserNode"> | string | null
    status?: StringFilter<"UserNode"> | string
    uptime?: StringFilter<"UserNode"> | string
    earnings?: StringFilter<"UserNode"> | string
    totalEarned?: FloatFilter<"UserNode"> | number
    startDate?: DateTimeFilter<"UserNode"> | Date | string
    hardware?: StringNullableFilter<"UserNode"> | string | null
    createdAt?: DateTimeFilter<"UserNode"> | Date | string
    updatedAt?: DateTimeFilter<"UserNode"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<DePINProjectRelationFilter, DePINProjectWhereInput>
    performances?: NodePerformanceListRelationFilter
  }, "id" | "userId_nodeId">

  export type UserNodeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    nodeId?: SortOrder
    type?: SortOrder
    capacity?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    monitorUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    uptime?: SortOrder
    earnings?: SortOrder
    totalEarned?: SortOrder
    startDate?: SortOrder
    hardware?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserNodeCountOrderByAggregateInput
    _avg?: UserNodeAvgOrderByAggregateInput
    _max?: UserNodeMaxOrderByAggregateInput
    _min?: UserNodeMinOrderByAggregateInput
    _sum?: UserNodeSumOrderByAggregateInput
  }

  export type UserNodeScalarWhereWithAggregatesInput = {
    AND?: UserNodeScalarWhereWithAggregatesInput | UserNodeScalarWhereWithAggregatesInput[]
    OR?: UserNodeScalarWhereWithAggregatesInput[]
    NOT?: UserNodeScalarWhereWithAggregatesInput | UserNodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserNode"> | string
    userId?: StringWithAggregatesFilter<"UserNode"> | string
    projectId?: StringWithAggregatesFilter<"UserNode"> | string
    nodeId?: StringWithAggregatesFilter<"UserNode"> | string
    type?: StringWithAggregatesFilter<"UserNode"> | string
    capacity?: StringNullableWithAggregatesFilter<"UserNode"> | string | null
    location?: StringNullableWithAggregatesFilter<"UserNode"> | string | null
    monitorUrl?: StringNullableWithAggregatesFilter<"UserNode"> | string | null
    status?: StringWithAggregatesFilter<"UserNode"> | string
    uptime?: StringWithAggregatesFilter<"UserNode"> | string
    earnings?: StringWithAggregatesFilter<"UserNode"> | string
    totalEarned?: FloatWithAggregatesFilter<"UserNode"> | number
    startDate?: DateTimeWithAggregatesFilter<"UserNode"> | Date | string
    hardware?: StringNullableWithAggregatesFilter<"UserNode"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserNode"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserNode"> | Date | string
  }

  export type NodePerformanceWhereInput = {
    AND?: NodePerformanceWhereInput | NodePerformanceWhereInput[]
    OR?: NodePerformanceWhereInput[]
    NOT?: NodePerformanceWhereInput | NodePerformanceWhereInput[]
    id?: StringFilter<"NodePerformance"> | string
    nodeId?: StringFilter<"NodePerformance"> | string
    cpuUsage?: FloatFilter<"NodePerformance"> | number
    memoryUsage?: FloatFilter<"NodePerformance"> | number
    diskUsage?: FloatFilter<"NodePerformance"> | number
    networkLatency?: FloatFilter<"NodePerformance"> | number
    bandwidthUp?: FloatFilter<"NodePerformance"> | number
    bandwidthDown?: FloatFilter<"NodePerformance"> | number
    timestamp?: DateTimeFilter<"NodePerformance"> | Date | string
    node?: XOR<UserNodeRelationFilter, UserNodeWhereInput>
  }

  export type NodePerformanceOrderByWithRelationInput = {
    id?: SortOrder
    nodeId?: SortOrder
    cpuUsage?: SortOrder
    memoryUsage?: SortOrder
    diskUsage?: SortOrder
    networkLatency?: SortOrder
    bandwidthUp?: SortOrder
    bandwidthDown?: SortOrder
    timestamp?: SortOrder
    node?: UserNodeOrderByWithRelationInput
  }

  export type NodePerformanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NodePerformanceWhereInput | NodePerformanceWhereInput[]
    OR?: NodePerformanceWhereInput[]
    NOT?: NodePerformanceWhereInput | NodePerformanceWhereInput[]
    nodeId?: StringFilter<"NodePerformance"> | string
    cpuUsage?: FloatFilter<"NodePerformance"> | number
    memoryUsage?: FloatFilter<"NodePerformance"> | number
    diskUsage?: FloatFilter<"NodePerformance"> | number
    networkLatency?: FloatFilter<"NodePerformance"> | number
    bandwidthUp?: FloatFilter<"NodePerformance"> | number
    bandwidthDown?: FloatFilter<"NodePerformance"> | number
    timestamp?: DateTimeFilter<"NodePerformance"> | Date | string
    node?: XOR<UserNodeRelationFilter, UserNodeWhereInput>
  }, "id">

  export type NodePerformanceOrderByWithAggregationInput = {
    id?: SortOrder
    nodeId?: SortOrder
    cpuUsage?: SortOrder
    memoryUsage?: SortOrder
    diskUsage?: SortOrder
    networkLatency?: SortOrder
    bandwidthUp?: SortOrder
    bandwidthDown?: SortOrder
    timestamp?: SortOrder
    _count?: NodePerformanceCountOrderByAggregateInput
    _avg?: NodePerformanceAvgOrderByAggregateInput
    _max?: NodePerformanceMaxOrderByAggregateInput
    _min?: NodePerformanceMinOrderByAggregateInput
    _sum?: NodePerformanceSumOrderByAggregateInput
  }

  export type NodePerformanceScalarWhereWithAggregatesInput = {
    AND?: NodePerformanceScalarWhereWithAggregatesInput | NodePerformanceScalarWhereWithAggregatesInput[]
    OR?: NodePerformanceScalarWhereWithAggregatesInput[]
    NOT?: NodePerformanceScalarWhereWithAggregatesInput | NodePerformanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NodePerformance"> | string
    nodeId?: StringWithAggregatesFilter<"NodePerformance"> | string
    cpuUsage?: FloatWithAggregatesFilter<"NodePerformance"> | number
    memoryUsage?: FloatWithAggregatesFilter<"NodePerformance"> | number
    diskUsage?: FloatWithAggregatesFilter<"NodePerformance"> | number
    networkLatency?: FloatWithAggregatesFilter<"NodePerformance"> | number
    bandwidthUp?: FloatWithAggregatesFilter<"NodePerformance"> | number
    bandwidthDown?: FloatWithAggregatesFilter<"NodePerformance"> | number
    timestamp?: DateTimeWithAggregatesFilter<"NodePerformance"> | Date | string
  }

  export type ROICalculationWhereInput = {
    AND?: ROICalculationWhereInput | ROICalculationWhereInput[]
    OR?: ROICalculationWhereInput[]
    NOT?: ROICalculationWhereInput | ROICalculationWhereInput[]
    id?: StringFilter<"ROICalculation"> | string
    userId?: StringFilter<"ROICalculation"> | string
    projectId?: StringFilter<"ROICalculation"> | string
    location?: StringFilter<"ROICalculation"> | string
    hardwareCost?: FloatFilter<"ROICalculation"> | number
    monthlyCost?: FloatFilter<"ROICalculation"> | number
    estimatedMonthlyReward?: FloatFilter<"ROICalculation"> | number
    roiMonths?: FloatFilter<"ROICalculation"> | number
    annualROI?: FloatFilter<"ROICalculation"> | number
    riskFactors?: StringFilter<"ROICalculation"> | string
    createdAt?: DateTimeFilter<"ROICalculation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<DePINProjectRelationFilter, DePINProjectWhereInput>
  }

  export type ROICalculationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    location?: SortOrder
    hardwareCost?: SortOrder
    monthlyCost?: SortOrder
    estimatedMonthlyReward?: SortOrder
    roiMonths?: SortOrder
    annualROI?: SortOrder
    riskFactors?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    project?: DePINProjectOrderByWithRelationInput
  }

  export type ROICalculationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ROICalculationWhereInput | ROICalculationWhereInput[]
    OR?: ROICalculationWhereInput[]
    NOT?: ROICalculationWhereInput | ROICalculationWhereInput[]
    userId?: StringFilter<"ROICalculation"> | string
    projectId?: StringFilter<"ROICalculation"> | string
    location?: StringFilter<"ROICalculation"> | string
    hardwareCost?: FloatFilter<"ROICalculation"> | number
    monthlyCost?: FloatFilter<"ROICalculation"> | number
    estimatedMonthlyReward?: FloatFilter<"ROICalculation"> | number
    roiMonths?: FloatFilter<"ROICalculation"> | number
    annualROI?: FloatFilter<"ROICalculation"> | number
    riskFactors?: StringFilter<"ROICalculation"> | string
    createdAt?: DateTimeFilter<"ROICalculation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<DePINProjectRelationFilter, DePINProjectWhereInput>
  }, "id">

  export type ROICalculationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    location?: SortOrder
    hardwareCost?: SortOrder
    monthlyCost?: SortOrder
    estimatedMonthlyReward?: SortOrder
    roiMonths?: SortOrder
    annualROI?: SortOrder
    riskFactors?: SortOrder
    createdAt?: SortOrder
    _count?: ROICalculationCountOrderByAggregateInput
    _avg?: ROICalculationAvgOrderByAggregateInput
    _max?: ROICalculationMaxOrderByAggregateInput
    _min?: ROICalculationMinOrderByAggregateInput
    _sum?: ROICalculationSumOrderByAggregateInput
  }

  export type ROICalculationScalarWhereWithAggregatesInput = {
    AND?: ROICalculationScalarWhereWithAggregatesInput | ROICalculationScalarWhereWithAggregatesInput[]
    OR?: ROICalculationScalarWhereWithAggregatesInput[]
    NOT?: ROICalculationScalarWhereWithAggregatesInput | ROICalculationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ROICalculation"> | string
    userId?: StringWithAggregatesFilter<"ROICalculation"> | string
    projectId?: StringWithAggregatesFilter<"ROICalculation"> | string
    location?: StringWithAggregatesFilter<"ROICalculation"> | string
    hardwareCost?: FloatWithAggregatesFilter<"ROICalculation"> | number
    monthlyCost?: FloatWithAggregatesFilter<"ROICalculation"> | number
    estimatedMonthlyReward?: FloatWithAggregatesFilter<"ROICalculation"> | number
    roiMonths?: FloatWithAggregatesFilter<"ROICalculation"> | number
    annualROI?: FloatWithAggregatesFilter<"ROICalculation"> | number
    riskFactors?: StringWithAggregatesFilter<"ROICalculation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ROICalculation"> | Date | string
  }

  export type SystemNotificationWhereInput = {
    AND?: SystemNotificationWhereInput | SystemNotificationWhereInput[]
    OR?: SystemNotificationWhereInput[]
    NOT?: SystemNotificationWhereInput | SystemNotificationWhereInput[]
    id?: StringFilter<"SystemNotification"> | string
    userId?: StringNullableFilter<"SystemNotification"> | string | null
    type?: StringFilter<"SystemNotification"> | string
    title?: StringFilter<"SystemNotification"> | string
    message?: StringFilter<"SystemNotification"> | string
    isRead?: BoolFilter<"SystemNotification"> | boolean
    data?: StringNullableFilter<"SystemNotification"> | string | null
    createdAt?: DateTimeFilter<"SystemNotification"> | Date | string
  }

  export type SystemNotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type SystemNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SystemNotificationWhereInput | SystemNotificationWhereInput[]
    OR?: SystemNotificationWhereInput[]
    NOT?: SystemNotificationWhereInput | SystemNotificationWhereInput[]
    userId?: StringNullableFilter<"SystemNotification"> | string | null
    type?: StringFilter<"SystemNotification"> | string
    title?: StringFilter<"SystemNotification"> | string
    message?: StringFilter<"SystemNotification"> | string
    isRead?: BoolFilter<"SystemNotification"> | boolean
    data?: StringNullableFilter<"SystemNotification"> | string | null
    createdAt?: DateTimeFilter<"SystemNotification"> | Date | string
  }, "id">

  export type SystemNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    data?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SystemNotificationCountOrderByAggregateInput
    _max?: SystemNotificationMaxOrderByAggregateInput
    _min?: SystemNotificationMinOrderByAggregateInput
  }

  export type SystemNotificationScalarWhereWithAggregatesInput = {
    AND?: SystemNotificationScalarWhereWithAggregatesInput | SystemNotificationScalarWhereWithAggregatesInput[]
    OR?: SystemNotificationScalarWhereWithAggregatesInput[]
    NOT?: SystemNotificationScalarWhereWithAggregatesInput | SystemNotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemNotification"> | string
    userId?: StringNullableWithAggregatesFilter<"SystemNotification"> | string | null
    type?: StringWithAggregatesFilter<"SystemNotification"> | string
    title?: StringWithAggregatesFilter<"SystemNotification"> | string
    message?: StringWithAggregatesFilter<"SystemNotification"> | string
    isRead?: BoolWithAggregatesFilter<"SystemNotification"> | boolean
    data?: StringNullableWithAggregatesFilter<"SystemNotification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SystemNotification"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    walletAddress: string
    publicKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    settings?: string | null
    nodes?: UserNodeCreateNestedManyWithoutUserInput
    roiCalculations?: ROICalculationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    walletAddress: string
    publicKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    settings?: string | null
    nodes?: UserNodeUncheckedCreateNestedManyWithoutUserInput
    roiCalculations?: ROICalculationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    nodes?: UserNodeUpdateManyWithoutUserNestedInput
    roiCalculations?: ROICalculationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    nodes?: UserNodeUncheckedUpdateManyWithoutUserNestedInput
    roiCalculations?: ROICalculationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    walletAddress: string
    publicKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    settings?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DePINProjectCreateInput = {
    id?: string
    name: string
    category: string
    description: string
    blockchain: string
    tokenSymbol: string
    tokenPrice?: number
    marketCap?: string
    volume24h?: string
    apy: string
    status?: string
    minInvestment: number
    roiPeriod: number
    geographicFocus: string
    riskLevel: string
    hardwareRequirements: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nodes?: UserNodeCreateNestedManyWithoutProjectInput
    roiCalculations?: ROICalculationCreateNestedManyWithoutProjectInput
  }

  export type DePINProjectUncheckedCreateInput = {
    id?: string
    name: string
    category: string
    description: string
    blockchain: string
    tokenSymbol: string
    tokenPrice?: number
    marketCap?: string
    volume24h?: string
    apy: string
    status?: string
    minInvestment: number
    roiPeriod: number
    geographicFocus: string
    riskLevel: string
    hardwareRequirements: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nodes?: UserNodeUncheckedCreateNestedManyWithoutProjectInput
    roiCalculations?: ROICalculationUncheckedCreateNestedManyWithoutProjectInput
  }

  export type DePINProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    blockchain?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    tokenPrice?: FloatFieldUpdateOperationsInput | number
    marketCap?: StringFieldUpdateOperationsInput | string
    volume24h?: StringFieldUpdateOperationsInput | string
    apy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    minInvestment?: FloatFieldUpdateOperationsInput | number
    roiPeriod?: IntFieldUpdateOperationsInput | number
    geographicFocus?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    hardwareRequirements?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodes?: UserNodeUpdateManyWithoutProjectNestedInput
    roiCalculations?: ROICalculationUpdateManyWithoutProjectNestedInput
  }

  export type DePINProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    blockchain?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    tokenPrice?: FloatFieldUpdateOperationsInput | number
    marketCap?: StringFieldUpdateOperationsInput | string
    volume24h?: StringFieldUpdateOperationsInput | string
    apy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    minInvestment?: FloatFieldUpdateOperationsInput | number
    roiPeriod?: IntFieldUpdateOperationsInput | number
    geographicFocus?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    hardwareRequirements?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodes?: UserNodeUncheckedUpdateManyWithoutProjectNestedInput
    roiCalculations?: ROICalculationUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type DePINProjectCreateManyInput = {
    id?: string
    name: string
    category: string
    description: string
    blockchain: string
    tokenSymbol: string
    tokenPrice?: number
    marketCap?: string
    volume24h?: string
    apy: string
    status?: string
    minInvestment: number
    roiPeriod: number
    geographicFocus: string
    riskLevel: string
    hardwareRequirements: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DePINProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    blockchain?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    tokenPrice?: FloatFieldUpdateOperationsInput | number
    marketCap?: StringFieldUpdateOperationsInput | string
    volume24h?: StringFieldUpdateOperationsInput | string
    apy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    minInvestment?: FloatFieldUpdateOperationsInput | number
    roiPeriod?: IntFieldUpdateOperationsInput | number
    geographicFocus?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    hardwareRequirements?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DePINProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    blockchain?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    tokenPrice?: FloatFieldUpdateOperationsInput | number
    marketCap?: StringFieldUpdateOperationsInput | string
    volume24h?: StringFieldUpdateOperationsInput | string
    apy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    minInvestment?: FloatFieldUpdateOperationsInput | number
    roiPeriod?: IntFieldUpdateOperationsInput | number
    geographicFocus?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    hardwareRequirements?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNodeCreateInput = {
    id?: string
    nodeId: string
    type: string
    capacity?: string | null
    location?: string | null
    monitorUrl?: string | null
    status?: string
    uptime?: string
    earnings?: string
    totalEarned?: number
    startDate?: Date | string
    hardware?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNodesInput
    project: DePINProjectCreateNestedOneWithoutNodesInput
    performances?: NodePerformanceCreateNestedManyWithoutNodeInput
  }

  export type UserNodeUncheckedCreateInput = {
    id?: string
    userId: string
    projectId: string
    nodeId: string
    type: string
    capacity?: string | null
    location?: string | null
    monitorUrl?: string | null
    status?: string
    uptime?: string
    earnings?: string
    totalEarned?: number
    startDate?: Date | string
    hardware?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performances?: NodePerformanceUncheckedCreateNestedManyWithoutNodeInput
  }

  export type UserNodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    monitorUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    uptime?: StringFieldUpdateOperationsInput | string
    earnings?: StringFieldUpdateOperationsInput | string
    totalEarned?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hardware?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNodesNestedInput
    project?: DePINProjectUpdateOneRequiredWithoutNodesNestedInput
    performances?: NodePerformanceUpdateManyWithoutNodeNestedInput
  }

  export type UserNodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    monitorUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    uptime?: StringFieldUpdateOperationsInput | string
    earnings?: StringFieldUpdateOperationsInput | string
    totalEarned?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hardware?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performances?: NodePerformanceUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type UserNodeCreateManyInput = {
    id?: string
    userId: string
    projectId: string
    nodeId: string
    type: string
    capacity?: string | null
    location?: string | null
    monitorUrl?: string | null
    status?: string
    uptime?: string
    earnings?: string
    totalEarned?: number
    startDate?: Date | string
    hardware?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserNodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    monitorUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    uptime?: StringFieldUpdateOperationsInput | string
    earnings?: StringFieldUpdateOperationsInput | string
    totalEarned?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hardware?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    monitorUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    uptime?: StringFieldUpdateOperationsInput | string
    earnings?: StringFieldUpdateOperationsInput | string
    totalEarned?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hardware?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodePerformanceCreateInput = {
    id?: string
    cpuUsage: number
    memoryUsage: number
    diskUsage: number
    networkLatency: number
    bandwidthUp: number
    bandwidthDown: number
    timestamp?: Date | string
    node: UserNodeCreateNestedOneWithoutPerformancesInput
  }

  export type NodePerformanceUncheckedCreateInput = {
    id?: string
    nodeId: string
    cpuUsage: number
    memoryUsage: number
    diskUsage: number
    networkLatency: number
    bandwidthUp: number
    bandwidthDown: number
    timestamp?: Date | string
  }

  export type NodePerformanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuUsage?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: FloatFieldUpdateOperationsInput | number
    diskUsage?: FloatFieldUpdateOperationsInput | number
    networkLatency?: FloatFieldUpdateOperationsInput | number
    bandwidthUp?: FloatFieldUpdateOperationsInput | number
    bandwidthDown?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    node?: UserNodeUpdateOneRequiredWithoutPerformancesNestedInput
  }

  export type NodePerformanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    cpuUsage?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: FloatFieldUpdateOperationsInput | number
    diskUsage?: FloatFieldUpdateOperationsInput | number
    networkLatency?: FloatFieldUpdateOperationsInput | number
    bandwidthUp?: FloatFieldUpdateOperationsInput | number
    bandwidthDown?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodePerformanceCreateManyInput = {
    id?: string
    nodeId: string
    cpuUsage: number
    memoryUsage: number
    diskUsage: number
    networkLatency: number
    bandwidthUp: number
    bandwidthDown: number
    timestamp?: Date | string
  }

  export type NodePerformanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuUsage?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: FloatFieldUpdateOperationsInput | number
    diskUsage?: FloatFieldUpdateOperationsInput | number
    networkLatency?: FloatFieldUpdateOperationsInput | number
    bandwidthUp?: FloatFieldUpdateOperationsInput | number
    bandwidthDown?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodePerformanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    cpuUsage?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: FloatFieldUpdateOperationsInput | number
    diskUsage?: FloatFieldUpdateOperationsInput | number
    networkLatency?: FloatFieldUpdateOperationsInput | number
    bandwidthUp?: FloatFieldUpdateOperationsInput | number
    bandwidthDown?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ROICalculationCreateInput = {
    id?: string
    location: string
    hardwareCost: number
    monthlyCost: number
    estimatedMonthlyReward: number
    roiMonths: number
    annualROI: number
    riskFactors: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRoiCalculationsInput
    project: DePINProjectCreateNestedOneWithoutRoiCalculationsInput
  }

  export type ROICalculationUncheckedCreateInput = {
    id?: string
    userId: string
    projectId: string
    location: string
    hardwareCost: number
    monthlyCost: number
    estimatedMonthlyReward: number
    roiMonths: number
    annualROI: number
    riskFactors: string
    createdAt?: Date | string
  }

  export type ROICalculationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    hardwareCost?: FloatFieldUpdateOperationsInput | number
    monthlyCost?: FloatFieldUpdateOperationsInput | number
    estimatedMonthlyReward?: FloatFieldUpdateOperationsInput | number
    roiMonths?: FloatFieldUpdateOperationsInput | number
    annualROI?: FloatFieldUpdateOperationsInput | number
    riskFactors?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRoiCalculationsNestedInput
    project?: DePINProjectUpdateOneRequiredWithoutRoiCalculationsNestedInput
  }

  export type ROICalculationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    hardwareCost?: FloatFieldUpdateOperationsInput | number
    monthlyCost?: FloatFieldUpdateOperationsInput | number
    estimatedMonthlyReward?: FloatFieldUpdateOperationsInput | number
    roiMonths?: FloatFieldUpdateOperationsInput | number
    annualROI?: FloatFieldUpdateOperationsInput | number
    riskFactors?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ROICalculationCreateManyInput = {
    id?: string
    userId: string
    projectId: string
    location: string
    hardwareCost: number
    monthlyCost: number
    estimatedMonthlyReward: number
    roiMonths: number
    annualROI: number
    riskFactors: string
    createdAt?: Date | string
  }

  export type ROICalculationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    hardwareCost?: FloatFieldUpdateOperationsInput | number
    monthlyCost?: FloatFieldUpdateOperationsInput | number
    estimatedMonthlyReward?: FloatFieldUpdateOperationsInput | number
    roiMonths?: FloatFieldUpdateOperationsInput | number
    annualROI?: FloatFieldUpdateOperationsInput | number
    riskFactors?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ROICalculationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    hardwareCost?: FloatFieldUpdateOperationsInput | number
    monthlyCost?: FloatFieldUpdateOperationsInput | number
    estimatedMonthlyReward?: FloatFieldUpdateOperationsInput | number
    roiMonths?: FloatFieldUpdateOperationsInput | number
    annualROI?: FloatFieldUpdateOperationsInput | number
    riskFactors?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemNotificationCreateInput = {
    id?: string
    userId?: string | null
    type: string
    title: string
    message: string
    isRead?: boolean
    data?: string | null
    createdAt?: Date | string
  }

  export type SystemNotificationUncheckedCreateInput = {
    id?: string
    userId?: string | null
    type: string
    title: string
    message: string
    isRead?: boolean
    data?: string | null
    createdAt?: Date | string
  }

  export type SystemNotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemNotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemNotificationCreateManyInput = {
    id?: string
    userId?: string | null
    type: string
    title: string
    message: string
    isRead?: boolean
    data?: string | null
    createdAt?: Date | string
  }

  export type SystemNotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemNotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    data?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserNodeListRelationFilter = {
    every?: UserNodeWhereInput
    some?: UserNodeWhereInput
    none?: UserNodeWhereInput
  }

  export type ROICalculationListRelationFilter = {
    every?: ROICalculationWhereInput
    some?: ROICalculationWhereInput
    none?: ROICalculationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserNodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ROICalculationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    publicKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
    settings?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    publicKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
    settings?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    publicKey?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
    settings?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DePINProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    blockchain?: SortOrder
    tokenSymbol?: SortOrder
    tokenPrice?: SortOrder
    marketCap?: SortOrder
    volume24h?: SortOrder
    apy?: SortOrder
    status?: SortOrder
    minInvestment?: SortOrder
    roiPeriod?: SortOrder
    geographicFocus?: SortOrder
    riskLevel?: SortOrder
    hardwareRequirements?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DePINProjectAvgOrderByAggregateInput = {
    tokenPrice?: SortOrder
    minInvestment?: SortOrder
    roiPeriod?: SortOrder
  }

  export type DePINProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    blockchain?: SortOrder
    tokenSymbol?: SortOrder
    tokenPrice?: SortOrder
    marketCap?: SortOrder
    volume24h?: SortOrder
    apy?: SortOrder
    status?: SortOrder
    minInvestment?: SortOrder
    roiPeriod?: SortOrder
    geographicFocus?: SortOrder
    riskLevel?: SortOrder
    hardwareRequirements?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DePINProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    blockchain?: SortOrder
    tokenSymbol?: SortOrder
    tokenPrice?: SortOrder
    marketCap?: SortOrder
    volume24h?: SortOrder
    apy?: SortOrder
    status?: SortOrder
    minInvestment?: SortOrder
    roiPeriod?: SortOrder
    geographicFocus?: SortOrder
    riskLevel?: SortOrder
    hardwareRequirements?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DePINProjectSumOrderByAggregateInput = {
    tokenPrice?: SortOrder
    minInvestment?: SortOrder
    roiPeriod?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DePINProjectRelationFilter = {
    is?: DePINProjectWhereInput
    isNot?: DePINProjectWhereInput
  }

  export type NodePerformanceListRelationFilter = {
    every?: NodePerformanceWhereInput
    some?: NodePerformanceWhereInput
    none?: NodePerformanceWhereInput
  }

  export type NodePerformanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserNodeUserIdNodeIdCompoundUniqueInput = {
    userId: string
    nodeId: string
  }

  export type UserNodeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    nodeId?: SortOrder
    type?: SortOrder
    capacity?: SortOrder
    location?: SortOrder
    monitorUrl?: SortOrder
    status?: SortOrder
    uptime?: SortOrder
    earnings?: SortOrder
    totalEarned?: SortOrder
    startDate?: SortOrder
    hardware?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserNodeAvgOrderByAggregateInput = {
    totalEarned?: SortOrder
  }

  export type UserNodeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    nodeId?: SortOrder
    type?: SortOrder
    capacity?: SortOrder
    location?: SortOrder
    monitorUrl?: SortOrder
    status?: SortOrder
    uptime?: SortOrder
    earnings?: SortOrder
    totalEarned?: SortOrder
    startDate?: SortOrder
    hardware?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserNodeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    nodeId?: SortOrder
    type?: SortOrder
    capacity?: SortOrder
    location?: SortOrder
    monitorUrl?: SortOrder
    status?: SortOrder
    uptime?: SortOrder
    earnings?: SortOrder
    totalEarned?: SortOrder
    startDate?: SortOrder
    hardware?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserNodeSumOrderByAggregateInput = {
    totalEarned?: SortOrder
  }

  export type UserNodeRelationFilter = {
    is?: UserNodeWhereInput
    isNot?: UserNodeWhereInput
  }

  export type NodePerformanceCountOrderByAggregateInput = {
    id?: SortOrder
    nodeId?: SortOrder
    cpuUsage?: SortOrder
    memoryUsage?: SortOrder
    diskUsage?: SortOrder
    networkLatency?: SortOrder
    bandwidthUp?: SortOrder
    bandwidthDown?: SortOrder
    timestamp?: SortOrder
  }

  export type NodePerformanceAvgOrderByAggregateInput = {
    cpuUsage?: SortOrder
    memoryUsage?: SortOrder
    diskUsage?: SortOrder
    networkLatency?: SortOrder
    bandwidthUp?: SortOrder
    bandwidthDown?: SortOrder
  }

  export type NodePerformanceMaxOrderByAggregateInput = {
    id?: SortOrder
    nodeId?: SortOrder
    cpuUsage?: SortOrder
    memoryUsage?: SortOrder
    diskUsage?: SortOrder
    networkLatency?: SortOrder
    bandwidthUp?: SortOrder
    bandwidthDown?: SortOrder
    timestamp?: SortOrder
  }

  export type NodePerformanceMinOrderByAggregateInput = {
    id?: SortOrder
    nodeId?: SortOrder
    cpuUsage?: SortOrder
    memoryUsage?: SortOrder
    diskUsage?: SortOrder
    networkLatency?: SortOrder
    bandwidthUp?: SortOrder
    bandwidthDown?: SortOrder
    timestamp?: SortOrder
  }

  export type NodePerformanceSumOrderByAggregateInput = {
    cpuUsage?: SortOrder
    memoryUsage?: SortOrder
    diskUsage?: SortOrder
    networkLatency?: SortOrder
    bandwidthUp?: SortOrder
    bandwidthDown?: SortOrder
  }

  export type ROICalculationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    location?: SortOrder
    hardwareCost?: SortOrder
    monthlyCost?: SortOrder
    estimatedMonthlyReward?: SortOrder
    roiMonths?: SortOrder
    annualROI?: SortOrder
    riskFactors?: SortOrder
    createdAt?: SortOrder
  }

  export type ROICalculationAvgOrderByAggregateInput = {
    hardwareCost?: SortOrder
    monthlyCost?: SortOrder
    estimatedMonthlyReward?: SortOrder
    roiMonths?: SortOrder
    annualROI?: SortOrder
  }

  export type ROICalculationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    location?: SortOrder
    hardwareCost?: SortOrder
    monthlyCost?: SortOrder
    estimatedMonthlyReward?: SortOrder
    roiMonths?: SortOrder
    annualROI?: SortOrder
    riskFactors?: SortOrder
    createdAt?: SortOrder
  }

  export type ROICalculationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    location?: SortOrder
    hardwareCost?: SortOrder
    monthlyCost?: SortOrder
    estimatedMonthlyReward?: SortOrder
    roiMonths?: SortOrder
    annualROI?: SortOrder
    riskFactors?: SortOrder
    createdAt?: SortOrder
  }

  export type ROICalculationSumOrderByAggregateInput = {
    hardwareCost?: SortOrder
    monthlyCost?: SortOrder
    estimatedMonthlyReward?: SortOrder
    roiMonths?: SortOrder
    annualROI?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type SystemNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
  }

  export type SystemNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
  }

  export type SystemNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserNodeCreateNestedManyWithoutUserInput = {
    create?: XOR<UserNodeCreateWithoutUserInput, UserNodeUncheckedCreateWithoutUserInput> | UserNodeCreateWithoutUserInput[] | UserNodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNodeCreateOrConnectWithoutUserInput | UserNodeCreateOrConnectWithoutUserInput[]
    createMany?: UserNodeCreateManyUserInputEnvelope
    connect?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
  }

  export type ROICalculationCreateNestedManyWithoutUserInput = {
    create?: XOR<ROICalculationCreateWithoutUserInput, ROICalculationUncheckedCreateWithoutUserInput> | ROICalculationCreateWithoutUserInput[] | ROICalculationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ROICalculationCreateOrConnectWithoutUserInput | ROICalculationCreateOrConnectWithoutUserInput[]
    createMany?: ROICalculationCreateManyUserInputEnvelope
    connect?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
  }

  export type UserNodeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserNodeCreateWithoutUserInput, UserNodeUncheckedCreateWithoutUserInput> | UserNodeCreateWithoutUserInput[] | UserNodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNodeCreateOrConnectWithoutUserInput | UserNodeCreateOrConnectWithoutUserInput[]
    createMany?: UserNodeCreateManyUserInputEnvelope
    connect?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
  }

  export type ROICalculationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ROICalculationCreateWithoutUserInput, ROICalculationUncheckedCreateWithoutUserInput> | ROICalculationCreateWithoutUserInput[] | ROICalculationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ROICalculationCreateOrConnectWithoutUserInput | ROICalculationCreateOrConnectWithoutUserInput[]
    createMany?: ROICalculationCreateManyUserInputEnvelope
    connect?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserNodeUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserNodeCreateWithoutUserInput, UserNodeUncheckedCreateWithoutUserInput> | UserNodeCreateWithoutUserInput[] | UserNodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNodeCreateOrConnectWithoutUserInput | UserNodeCreateOrConnectWithoutUserInput[]
    upsert?: UserNodeUpsertWithWhereUniqueWithoutUserInput | UserNodeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserNodeCreateManyUserInputEnvelope
    set?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    disconnect?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    delete?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    connect?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    update?: UserNodeUpdateWithWhereUniqueWithoutUserInput | UserNodeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserNodeUpdateManyWithWhereWithoutUserInput | UserNodeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserNodeScalarWhereInput | UserNodeScalarWhereInput[]
  }

  export type ROICalculationUpdateManyWithoutUserNestedInput = {
    create?: XOR<ROICalculationCreateWithoutUserInput, ROICalculationUncheckedCreateWithoutUserInput> | ROICalculationCreateWithoutUserInput[] | ROICalculationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ROICalculationCreateOrConnectWithoutUserInput | ROICalculationCreateOrConnectWithoutUserInput[]
    upsert?: ROICalculationUpsertWithWhereUniqueWithoutUserInput | ROICalculationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ROICalculationCreateManyUserInputEnvelope
    set?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    disconnect?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    delete?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    connect?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    update?: ROICalculationUpdateWithWhereUniqueWithoutUserInput | ROICalculationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ROICalculationUpdateManyWithWhereWithoutUserInput | ROICalculationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ROICalculationScalarWhereInput | ROICalculationScalarWhereInput[]
  }

  export type UserNodeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserNodeCreateWithoutUserInput, UserNodeUncheckedCreateWithoutUserInput> | UserNodeCreateWithoutUserInput[] | UserNodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNodeCreateOrConnectWithoutUserInput | UserNodeCreateOrConnectWithoutUserInput[]
    upsert?: UserNodeUpsertWithWhereUniqueWithoutUserInput | UserNodeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserNodeCreateManyUserInputEnvelope
    set?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    disconnect?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    delete?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    connect?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    update?: UserNodeUpdateWithWhereUniqueWithoutUserInput | UserNodeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserNodeUpdateManyWithWhereWithoutUserInput | UserNodeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserNodeScalarWhereInput | UserNodeScalarWhereInput[]
  }

  export type ROICalculationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ROICalculationCreateWithoutUserInput, ROICalculationUncheckedCreateWithoutUserInput> | ROICalculationCreateWithoutUserInput[] | ROICalculationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ROICalculationCreateOrConnectWithoutUserInput | ROICalculationCreateOrConnectWithoutUserInput[]
    upsert?: ROICalculationUpsertWithWhereUniqueWithoutUserInput | ROICalculationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ROICalculationCreateManyUserInputEnvelope
    set?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    disconnect?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    delete?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    connect?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    update?: ROICalculationUpdateWithWhereUniqueWithoutUserInput | ROICalculationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ROICalculationUpdateManyWithWhereWithoutUserInput | ROICalculationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ROICalculationScalarWhereInput | ROICalculationScalarWhereInput[]
  }

  export type UserNodeCreateNestedManyWithoutProjectInput = {
    create?: XOR<UserNodeCreateWithoutProjectInput, UserNodeUncheckedCreateWithoutProjectInput> | UserNodeCreateWithoutProjectInput[] | UserNodeUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserNodeCreateOrConnectWithoutProjectInput | UserNodeCreateOrConnectWithoutProjectInput[]
    createMany?: UserNodeCreateManyProjectInputEnvelope
    connect?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
  }

  export type ROICalculationCreateNestedManyWithoutProjectInput = {
    create?: XOR<ROICalculationCreateWithoutProjectInput, ROICalculationUncheckedCreateWithoutProjectInput> | ROICalculationCreateWithoutProjectInput[] | ROICalculationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ROICalculationCreateOrConnectWithoutProjectInput | ROICalculationCreateOrConnectWithoutProjectInput[]
    createMany?: ROICalculationCreateManyProjectInputEnvelope
    connect?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
  }

  export type UserNodeUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<UserNodeCreateWithoutProjectInput, UserNodeUncheckedCreateWithoutProjectInput> | UserNodeCreateWithoutProjectInput[] | UserNodeUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserNodeCreateOrConnectWithoutProjectInput | UserNodeCreateOrConnectWithoutProjectInput[]
    createMany?: UserNodeCreateManyProjectInputEnvelope
    connect?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
  }

  export type ROICalculationUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ROICalculationCreateWithoutProjectInput, ROICalculationUncheckedCreateWithoutProjectInput> | ROICalculationCreateWithoutProjectInput[] | ROICalculationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ROICalculationCreateOrConnectWithoutProjectInput | ROICalculationCreateOrConnectWithoutProjectInput[]
    createMany?: ROICalculationCreateManyProjectInputEnvelope
    connect?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserNodeUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UserNodeCreateWithoutProjectInput, UserNodeUncheckedCreateWithoutProjectInput> | UserNodeCreateWithoutProjectInput[] | UserNodeUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserNodeCreateOrConnectWithoutProjectInput | UserNodeCreateOrConnectWithoutProjectInput[]
    upsert?: UserNodeUpsertWithWhereUniqueWithoutProjectInput | UserNodeUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UserNodeCreateManyProjectInputEnvelope
    set?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    disconnect?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    delete?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    connect?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    update?: UserNodeUpdateWithWhereUniqueWithoutProjectInput | UserNodeUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UserNodeUpdateManyWithWhereWithoutProjectInput | UserNodeUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UserNodeScalarWhereInput | UserNodeScalarWhereInput[]
  }

  export type ROICalculationUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ROICalculationCreateWithoutProjectInput, ROICalculationUncheckedCreateWithoutProjectInput> | ROICalculationCreateWithoutProjectInput[] | ROICalculationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ROICalculationCreateOrConnectWithoutProjectInput | ROICalculationCreateOrConnectWithoutProjectInput[]
    upsert?: ROICalculationUpsertWithWhereUniqueWithoutProjectInput | ROICalculationUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ROICalculationCreateManyProjectInputEnvelope
    set?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    disconnect?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    delete?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    connect?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    update?: ROICalculationUpdateWithWhereUniqueWithoutProjectInput | ROICalculationUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ROICalculationUpdateManyWithWhereWithoutProjectInput | ROICalculationUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ROICalculationScalarWhereInput | ROICalculationScalarWhereInput[]
  }

  export type UserNodeUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<UserNodeCreateWithoutProjectInput, UserNodeUncheckedCreateWithoutProjectInput> | UserNodeCreateWithoutProjectInput[] | UserNodeUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: UserNodeCreateOrConnectWithoutProjectInput | UserNodeCreateOrConnectWithoutProjectInput[]
    upsert?: UserNodeUpsertWithWhereUniqueWithoutProjectInput | UserNodeUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: UserNodeCreateManyProjectInputEnvelope
    set?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    disconnect?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    delete?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    connect?: UserNodeWhereUniqueInput | UserNodeWhereUniqueInput[]
    update?: UserNodeUpdateWithWhereUniqueWithoutProjectInput | UserNodeUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: UserNodeUpdateManyWithWhereWithoutProjectInput | UserNodeUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: UserNodeScalarWhereInput | UserNodeScalarWhereInput[]
  }

  export type ROICalculationUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ROICalculationCreateWithoutProjectInput, ROICalculationUncheckedCreateWithoutProjectInput> | ROICalculationCreateWithoutProjectInput[] | ROICalculationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ROICalculationCreateOrConnectWithoutProjectInput | ROICalculationCreateOrConnectWithoutProjectInput[]
    upsert?: ROICalculationUpsertWithWhereUniqueWithoutProjectInput | ROICalculationUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ROICalculationCreateManyProjectInputEnvelope
    set?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    disconnect?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    delete?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    connect?: ROICalculationWhereUniqueInput | ROICalculationWhereUniqueInput[]
    update?: ROICalculationUpdateWithWhereUniqueWithoutProjectInput | ROICalculationUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ROICalculationUpdateManyWithWhereWithoutProjectInput | ROICalculationUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ROICalculationScalarWhereInput | ROICalculationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNodesInput = {
    create?: XOR<UserCreateWithoutNodesInput, UserUncheckedCreateWithoutNodesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNodesInput
    connect?: UserWhereUniqueInput
  }

  export type DePINProjectCreateNestedOneWithoutNodesInput = {
    create?: XOR<DePINProjectCreateWithoutNodesInput, DePINProjectUncheckedCreateWithoutNodesInput>
    connectOrCreate?: DePINProjectCreateOrConnectWithoutNodesInput
    connect?: DePINProjectWhereUniqueInput
  }

  export type NodePerformanceCreateNestedManyWithoutNodeInput = {
    create?: XOR<NodePerformanceCreateWithoutNodeInput, NodePerformanceUncheckedCreateWithoutNodeInput> | NodePerformanceCreateWithoutNodeInput[] | NodePerformanceUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: NodePerformanceCreateOrConnectWithoutNodeInput | NodePerformanceCreateOrConnectWithoutNodeInput[]
    createMany?: NodePerformanceCreateManyNodeInputEnvelope
    connect?: NodePerformanceWhereUniqueInput | NodePerformanceWhereUniqueInput[]
  }

  export type NodePerformanceUncheckedCreateNestedManyWithoutNodeInput = {
    create?: XOR<NodePerformanceCreateWithoutNodeInput, NodePerformanceUncheckedCreateWithoutNodeInput> | NodePerformanceCreateWithoutNodeInput[] | NodePerformanceUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: NodePerformanceCreateOrConnectWithoutNodeInput | NodePerformanceCreateOrConnectWithoutNodeInput[]
    createMany?: NodePerformanceCreateManyNodeInputEnvelope
    connect?: NodePerformanceWhereUniqueInput | NodePerformanceWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutNodesNestedInput = {
    create?: XOR<UserCreateWithoutNodesInput, UserUncheckedCreateWithoutNodesInput>
    connectOrCreate?: UserCreateOrConnectWithoutNodesInput
    upsert?: UserUpsertWithoutNodesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNodesInput, UserUpdateWithoutNodesInput>, UserUncheckedUpdateWithoutNodesInput>
  }

  export type DePINProjectUpdateOneRequiredWithoutNodesNestedInput = {
    create?: XOR<DePINProjectCreateWithoutNodesInput, DePINProjectUncheckedCreateWithoutNodesInput>
    connectOrCreate?: DePINProjectCreateOrConnectWithoutNodesInput
    upsert?: DePINProjectUpsertWithoutNodesInput
    connect?: DePINProjectWhereUniqueInput
    update?: XOR<XOR<DePINProjectUpdateToOneWithWhereWithoutNodesInput, DePINProjectUpdateWithoutNodesInput>, DePINProjectUncheckedUpdateWithoutNodesInput>
  }

  export type NodePerformanceUpdateManyWithoutNodeNestedInput = {
    create?: XOR<NodePerformanceCreateWithoutNodeInput, NodePerformanceUncheckedCreateWithoutNodeInput> | NodePerformanceCreateWithoutNodeInput[] | NodePerformanceUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: NodePerformanceCreateOrConnectWithoutNodeInput | NodePerformanceCreateOrConnectWithoutNodeInput[]
    upsert?: NodePerformanceUpsertWithWhereUniqueWithoutNodeInput | NodePerformanceUpsertWithWhereUniqueWithoutNodeInput[]
    createMany?: NodePerformanceCreateManyNodeInputEnvelope
    set?: NodePerformanceWhereUniqueInput | NodePerformanceWhereUniqueInput[]
    disconnect?: NodePerformanceWhereUniqueInput | NodePerformanceWhereUniqueInput[]
    delete?: NodePerformanceWhereUniqueInput | NodePerformanceWhereUniqueInput[]
    connect?: NodePerformanceWhereUniqueInput | NodePerformanceWhereUniqueInput[]
    update?: NodePerformanceUpdateWithWhereUniqueWithoutNodeInput | NodePerformanceUpdateWithWhereUniqueWithoutNodeInput[]
    updateMany?: NodePerformanceUpdateManyWithWhereWithoutNodeInput | NodePerformanceUpdateManyWithWhereWithoutNodeInput[]
    deleteMany?: NodePerformanceScalarWhereInput | NodePerformanceScalarWhereInput[]
  }

  export type NodePerformanceUncheckedUpdateManyWithoutNodeNestedInput = {
    create?: XOR<NodePerformanceCreateWithoutNodeInput, NodePerformanceUncheckedCreateWithoutNodeInput> | NodePerformanceCreateWithoutNodeInput[] | NodePerformanceUncheckedCreateWithoutNodeInput[]
    connectOrCreate?: NodePerformanceCreateOrConnectWithoutNodeInput | NodePerformanceCreateOrConnectWithoutNodeInput[]
    upsert?: NodePerformanceUpsertWithWhereUniqueWithoutNodeInput | NodePerformanceUpsertWithWhereUniqueWithoutNodeInput[]
    createMany?: NodePerformanceCreateManyNodeInputEnvelope
    set?: NodePerformanceWhereUniqueInput | NodePerformanceWhereUniqueInput[]
    disconnect?: NodePerformanceWhereUniqueInput | NodePerformanceWhereUniqueInput[]
    delete?: NodePerformanceWhereUniqueInput | NodePerformanceWhereUniqueInput[]
    connect?: NodePerformanceWhereUniqueInput | NodePerformanceWhereUniqueInput[]
    update?: NodePerformanceUpdateWithWhereUniqueWithoutNodeInput | NodePerformanceUpdateWithWhereUniqueWithoutNodeInput[]
    updateMany?: NodePerformanceUpdateManyWithWhereWithoutNodeInput | NodePerformanceUpdateManyWithWhereWithoutNodeInput[]
    deleteMany?: NodePerformanceScalarWhereInput | NodePerformanceScalarWhereInput[]
  }

  export type UserNodeCreateNestedOneWithoutPerformancesInput = {
    create?: XOR<UserNodeCreateWithoutPerformancesInput, UserNodeUncheckedCreateWithoutPerformancesInput>
    connectOrCreate?: UserNodeCreateOrConnectWithoutPerformancesInput
    connect?: UserNodeWhereUniqueInput
  }

  export type UserNodeUpdateOneRequiredWithoutPerformancesNestedInput = {
    create?: XOR<UserNodeCreateWithoutPerformancesInput, UserNodeUncheckedCreateWithoutPerformancesInput>
    connectOrCreate?: UserNodeCreateOrConnectWithoutPerformancesInput
    upsert?: UserNodeUpsertWithoutPerformancesInput
    connect?: UserNodeWhereUniqueInput
    update?: XOR<XOR<UserNodeUpdateToOneWithWhereWithoutPerformancesInput, UserNodeUpdateWithoutPerformancesInput>, UserNodeUncheckedUpdateWithoutPerformancesInput>
  }

  export type UserCreateNestedOneWithoutRoiCalculationsInput = {
    create?: XOR<UserCreateWithoutRoiCalculationsInput, UserUncheckedCreateWithoutRoiCalculationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoiCalculationsInput
    connect?: UserWhereUniqueInput
  }

  export type DePINProjectCreateNestedOneWithoutRoiCalculationsInput = {
    create?: XOR<DePINProjectCreateWithoutRoiCalculationsInput, DePINProjectUncheckedCreateWithoutRoiCalculationsInput>
    connectOrCreate?: DePINProjectCreateOrConnectWithoutRoiCalculationsInput
    connect?: DePINProjectWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRoiCalculationsNestedInput = {
    create?: XOR<UserCreateWithoutRoiCalculationsInput, UserUncheckedCreateWithoutRoiCalculationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoiCalculationsInput
    upsert?: UserUpsertWithoutRoiCalculationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRoiCalculationsInput, UserUpdateWithoutRoiCalculationsInput>, UserUncheckedUpdateWithoutRoiCalculationsInput>
  }

  export type DePINProjectUpdateOneRequiredWithoutRoiCalculationsNestedInput = {
    create?: XOR<DePINProjectCreateWithoutRoiCalculationsInput, DePINProjectUncheckedCreateWithoutRoiCalculationsInput>
    connectOrCreate?: DePINProjectCreateOrConnectWithoutRoiCalculationsInput
    upsert?: DePINProjectUpsertWithoutRoiCalculationsInput
    connect?: DePINProjectWhereUniqueInput
    update?: XOR<XOR<DePINProjectUpdateToOneWithWhereWithoutRoiCalculationsInput, DePINProjectUpdateWithoutRoiCalculationsInput>, DePINProjectUncheckedUpdateWithoutRoiCalculationsInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserNodeCreateWithoutUserInput = {
    id?: string
    nodeId: string
    type: string
    capacity?: string | null
    location?: string | null
    monitorUrl?: string | null
    status?: string
    uptime?: string
    earnings?: string
    totalEarned?: number
    startDate?: Date | string
    hardware?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: DePINProjectCreateNestedOneWithoutNodesInput
    performances?: NodePerformanceCreateNestedManyWithoutNodeInput
  }

  export type UserNodeUncheckedCreateWithoutUserInput = {
    id?: string
    projectId: string
    nodeId: string
    type: string
    capacity?: string | null
    location?: string | null
    monitorUrl?: string | null
    status?: string
    uptime?: string
    earnings?: string
    totalEarned?: number
    startDate?: Date | string
    hardware?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performances?: NodePerformanceUncheckedCreateNestedManyWithoutNodeInput
  }

  export type UserNodeCreateOrConnectWithoutUserInput = {
    where: UserNodeWhereUniqueInput
    create: XOR<UserNodeCreateWithoutUserInput, UserNodeUncheckedCreateWithoutUserInput>
  }

  export type UserNodeCreateManyUserInputEnvelope = {
    data: UserNodeCreateManyUserInput | UserNodeCreateManyUserInput[]
  }

  export type ROICalculationCreateWithoutUserInput = {
    id?: string
    location: string
    hardwareCost: number
    monthlyCost: number
    estimatedMonthlyReward: number
    roiMonths: number
    annualROI: number
    riskFactors: string
    createdAt?: Date | string
    project: DePINProjectCreateNestedOneWithoutRoiCalculationsInput
  }

  export type ROICalculationUncheckedCreateWithoutUserInput = {
    id?: string
    projectId: string
    location: string
    hardwareCost: number
    monthlyCost: number
    estimatedMonthlyReward: number
    roiMonths: number
    annualROI: number
    riskFactors: string
    createdAt?: Date | string
  }

  export type ROICalculationCreateOrConnectWithoutUserInput = {
    where: ROICalculationWhereUniqueInput
    create: XOR<ROICalculationCreateWithoutUserInput, ROICalculationUncheckedCreateWithoutUserInput>
  }

  export type ROICalculationCreateManyUserInputEnvelope = {
    data: ROICalculationCreateManyUserInput | ROICalculationCreateManyUserInput[]
  }

  export type UserNodeUpsertWithWhereUniqueWithoutUserInput = {
    where: UserNodeWhereUniqueInput
    update: XOR<UserNodeUpdateWithoutUserInput, UserNodeUncheckedUpdateWithoutUserInput>
    create: XOR<UserNodeCreateWithoutUserInput, UserNodeUncheckedCreateWithoutUserInput>
  }

  export type UserNodeUpdateWithWhereUniqueWithoutUserInput = {
    where: UserNodeWhereUniqueInput
    data: XOR<UserNodeUpdateWithoutUserInput, UserNodeUncheckedUpdateWithoutUserInput>
  }

  export type UserNodeUpdateManyWithWhereWithoutUserInput = {
    where: UserNodeScalarWhereInput
    data: XOR<UserNodeUpdateManyMutationInput, UserNodeUncheckedUpdateManyWithoutUserInput>
  }

  export type UserNodeScalarWhereInput = {
    AND?: UserNodeScalarWhereInput | UserNodeScalarWhereInput[]
    OR?: UserNodeScalarWhereInput[]
    NOT?: UserNodeScalarWhereInput | UserNodeScalarWhereInput[]
    id?: StringFilter<"UserNode"> | string
    userId?: StringFilter<"UserNode"> | string
    projectId?: StringFilter<"UserNode"> | string
    nodeId?: StringFilter<"UserNode"> | string
    type?: StringFilter<"UserNode"> | string
    capacity?: StringNullableFilter<"UserNode"> | string | null
    location?: StringNullableFilter<"UserNode"> | string | null
    monitorUrl?: StringNullableFilter<"UserNode"> | string | null
    status?: StringFilter<"UserNode"> | string
    uptime?: StringFilter<"UserNode"> | string
    earnings?: StringFilter<"UserNode"> | string
    totalEarned?: FloatFilter<"UserNode"> | number
    startDate?: DateTimeFilter<"UserNode"> | Date | string
    hardware?: StringNullableFilter<"UserNode"> | string | null
    createdAt?: DateTimeFilter<"UserNode"> | Date | string
    updatedAt?: DateTimeFilter<"UserNode"> | Date | string
  }

  export type ROICalculationUpsertWithWhereUniqueWithoutUserInput = {
    where: ROICalculationWhereUniqueInput
    update: XOR<ROICalculationUpdateWithoutUserInput, ROICalculationUncheckedUpdateWithoutUserInput>
    create: XOR<ROICalculationCreateWithoutUserInput, ROICalculationUncheckedCreateWithoutUserInput>
  }

  export type ROICalculationUpdateWithWhereUniqueWithoutUserInput = {
    where: ROICalculationWhereUniqueInput
    data: XOR<ROICalculationUpdateWithoutUserInput, ROICalculationUncheckedUpdateWithoutUserInput>
  }

  export type ROICalculationUpdateManyWithWhereWithoutUserInput = {
    where: ROICalculationScalarWhereInput
    data: XOR<ROICalculationUpdateManyMutationInput, ROICalculationUncheckedUpdateManyWithoutUserInput>
  }

  export type ROICalculationScalarWhereInput = {
    AND?: ROICalculationScalarWhereInput | ROICalculationScalarWhereInput[]
    OR?: ROICalculationScalarWhereInput[]
    NOT?: ROICalculationScalarWhereInput | ROICalculationScalarWhereInput[]
    id?: StringFilter<"ROICalculation"> | string
    userId?: StringFilter<"ROICalculation"> | string
    projectId?: StringFilter<"ROICalculation"> | string
    location?: StringFilter<"ROICalculation"> | string
    hardwareCost?: FloatFilter<"ROICalculation"> | number
    monthlyCost?: FloatFilter<"ROICalculation"> | number
    estimatedMonthlyReward?: FloatFilter<"ROICalculation"> | number
    roiMonths?: FloatFilter<"ROICalculation"> | number
    annualROI?: FloatFilter<"ROICalculation"> | number
    riskFactors?: StringFilter<"ROICalculation"> | string
    createdAt?: DateTimeFilter<"ROICalculation"> | Date | string
  }

  export type UserNodeCreateWithoutProjectInput = {
    id?: string
    nodeId: string
    type: string
    capacity?: string | null
    location?: string | null
    monitorUrl?: string | null
    status?: string
    uptime?: string
    earnings?: string
    totalEarned?: number
    startDate?: Date | string
    hardware?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNodesInput
    performances?: NodePerformanceCreateNestedManyWithoutNodeInput
  }

  export type UserNodeUncheckedCreateWithoutProjectInput = {
    id?: string
    userId: string
    nodeId: string
    type: string
    capacity?: string | null
    location?: string | null
    monitorUrl?: string | null
    status?: string
    uptime?: string
    earnings?: string
    totalEarned?: number
    startDate?: Date | string
    hardware?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    performances?: NodePerformanceUncheckedCreateNestedManyWithoutNodeInput
  }

  export type UserNodeCreateOrConnectWithoutProjectInput = {
    where: UserNodeWhereUniqueInput
    create: XOR<UserNodeCreateWithoutProjectInput, UserNodeUncheckedCreateWithoutProjectInput>
  }

  export type UserNodeCreateManyProjectInputEnvelope = {
    data: UserNodeCreateManyProjectInput | UserNodeCreateManyProjectInput[]
  }

  export type ROICalculationCreateWithoutProjectInput = {
    id?: string
    location: string
    hardwareCost: number
    monthlyCost: number
    estimatedMonthlyReward: number
    roiMonths: number
    annualROI: number
    riskFactors: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRoiCalculationsInput
  }

  export type ROICalculationUncheckedCreateWithoutProjectInput = {
    id?: string
    userId: string
    location: string
    hardwareCost: number
    monthlyCost: number
    estimatedMonthlyReward: number
    roiMonths: number
    annualROI: number
    riskFactors: string
    createdAt?: Date | string
  }

  export type ROICalculationCreateOrConnectWithoutProjectInput = {
    where: ROICalculationWhereUniqueInput
    create: XOR<ROICalculationCreateWithoutProjectInput, ROICalculationUncheckedCreateWithoutProjectInput>
  }

  export type ROICalculationCreateManyProjectInputEnvelope = {
    data: ROICalculationCreateManyProjectInput | ROICalculationCreateManyProjectInput[]
  }

  export type UserNodeUpsertWithWhereUniqueWithoutProjectInput = {
    where: UserNodeWhereUniqueInput
    update: XOR<UserNodeUpdateWithoutProjectInput, UserNodeUncheckedUpdateWithoutProjectInput>
    create: XOR<UserNodeCreateWithoutProjectInput, UserNodeUncheckedCreateWithoutProjectInput>
  }

  export type UserNodeUpdateWithWhereUniqueWithoutProjectInput = {
    where: UserNodeWhereUniqueInput
    data: XOR<UserNodeUpdateWithoutProjectInput, UserNodeUncheckedUpdateWithoutProjectInput>
  }

  export type UserNodeUpdateManyWithWhereWithoutProjectInput = {
    where: UserNodeScalarWhereInput
    data: XOR<UserNodeUpdateManyMutationInput, UserNodeUncheckedUpdateManyWithoutProjectInput>
  }

  export type ROICalculationUpsertWithWhereUniqueWithoutProjectInput = {
    where: ROICalculationWhereUniqueInput
    update: XOR<ROICalculationUpdateWithoutProjectInput, ROICalculationUncheckedUpdateWithoutProjectInput>
    create: XOR<ROICalculationCreateWithoutProjectInput, ROICalculationUncheckedCreateWithoutProjectInput>
  }

  export type ROICalculationUpdateWithWhereUniqueWithoutProjectInput = {
    where: ROICalculationWhereUniqueInput
    data: XOR<ROICalculationUpdateWithoutProjectInput, ROICalculationUncheckedUpdateWithoutProjectInput>
  }

  export type ROICalculationUpdateManyWithWhereWithoutProjectInput = {
    where: ROICalculationScalarWhereInput
    data: XOR<ROICalculationUpdateManyMutationInput, ROICalculationUncheckedUpdateManyWithoutProjectInput>
  }

  export type UserCreateWithoutNodesInput = {
    id?: string
    walletAddress: string
    publicKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    settings?: string | null
    roiCalculations?: ROICalculationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNodesInput = {
    id?: string
    walletAddress: string
    publicKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    settings?: string | null
    roiCalculations?: ROICalculationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNodesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNodesInput, UserUncheckedCreateWithoutNodesInput>
  }

  export type DePINProjectCreateWithoutNodesInput = {
    id?: string
    name: string
    category: string
    description: string
    blockchain: string
    tokenSymbol: string
    tokenPrice?: number
    marketCap?: string
    volume24h?: string
    apy: string
    status?: string
    minInvestment: number
    roiPeriod: number
    geographicFocus: string
    riskLevel: string
    hardwareRequirements: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roiCalculations?: ROICalculationCreateNestedManyWithoutProjectInput
  }

  export type DePINProjectUncheckedCreateWithoutNodesInput = {
    id?: string
    name: string
    category: string
    description: string
    blockchain: string
    tokenSymbol: string
    tokenPrice?: number
    marketCap?: string
    volume24h?: string
    apy: string
    status?: string
    minInvestment: number
    roiPeriod: number
    geographicFocus: string
    riskLevel: string
    hardwareRequirements: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roiCalculations?: ROICalculationUncheckedCreateNestedManyWithoutProjectInput
  }

  export type DePINProjectCreateOrConnectWithoutNodesInput = {
    where: DePINProjectWhereUniqueInput
    create: XOR<DePINProjectCreateWithoutNodesInput, DePINProjectUncheckedCreateWithoutNodesInput>
  }

  export type NodePerformanceCreateWithoutNodeInput = {
    id?: string
    cpuUsage: number
    memoryUsage: number
    diskUsage: number
    networkLatency: number
    bandwidthUp: number
    bandwidthDown: number
    timestamp?: Date | string
  }

  export type NodePerformanceUncheckedCreateWithoutNodeInput = {
    id?: string
    cpuUsage: number
    memoryUsage: number
    diskUsage: number
    networkLatency: number
    bandwidthUp: number
    bandwidthDown: number
    timestamp?: Date | string
  }

  export type NodePerformanceCreateOrConnectWithoutNodeInput = {
    where: NodePerformanceWhereUniqueInput
    create: XOR<NodePerformanceCreateWithoutNodeInput, NodePerformanceUncheckedCreateWithoutNodeInput>
  }

  export type NodePerformanceCreateManyNodeInputEnvelope = {
    data: NodePerformanceCreateManyNodeInput | NodePerformanceCreateManyNodeInput[]
  }

  export type UserUpsertWithoutNodesInput = {
    update: XOR<UserUpdateWithoutNodesInput, UserUncheckedUpdateWithoutNodesInput>
    create: XOR<UserCreateWithoutNodesInput, UserUncheckedCreateWithoutNodesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNodesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNodesInput, UserUncheckedUpdateWithoutNodesInput>
  }

  export type UserUpdateWithoutNodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    roiCalculations?: ROICalculationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    roiCalculations?: ROICalculationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DePINProjectUpsertWithoutNodesInput = {
    update: XOR<DePINProjectUpdateWithoutNodesInput, DePINProjectUncheckedUpdateWithoutNodesInput>
    create: XOR<DePINProjectCreateWithoutNodesInput, DePINProjectUncheckedCreateWithoutNodesInput>
    where?: DePINProjectWhereInput
  }

  export type DePINProjectUpdateToOneWithWhereWithoutNodesInput = {
    where?: DePINProjectWhereInput
    data: XOR<DePINProjectUpdateWithoutNodesInput, DePINProjectUncheckedUpdateWithoutNodesInput>
  }

  export type DePINProjectUpdateWithoutNodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    blockchain?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    tokenPrice?: FloatFieldUpdateOperationsInput | number
    marketCap?: StringFieldUpdateOperationsInput | string
    volume24h?: StringFieldUpdateOperationsInput | string
    apy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    minInvestment?: FloatFieldUpdateOperationsInput | number
    roiPeriod?: IntFieldUpdateOperationsInput | number
    geographicFocus?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    hardwareRequirements?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roiCalculations?: ROICalculationUpdateManyWithoutProjectNestedInput
  }

  export type DePINProjectUncheckedUpdateWithoutNodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    blockchain?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    tokenPrice?: FloatFieldUpdateOperationsInput | number
    marketCap?: StringFieldUpdateOperationsInput | string
    volume24h?: StringFieldUpdateOperationsInput | string
    apy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    minInvestment?: FloatFieldUpdateOperationsInput | number
    roiPeriod?: IntFieldUpdateOperationsInput | number
    geographicFocus?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    hardwareRequirements?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roiCalculations?: ROICalculationUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type NodePerformanceUpsertWithWhereUniqueWithoutNodeInput = {
    where: NodePerformanceWhereUniqueInput
    update: XOR<NodePerformanceUpdateWithoutNodeInput, NodePerformanceUncheckedUpdateWithoutNodeInput>
    create: XOR<NodePerformanceCreateWithoutNodeInput, NodePerformanceUncheckedCreateWithoutNodeInput>
  }

  export type NodePerformanceUpdateWithWhereUniqueWithoutNodeInput = {
    where: NodePerformanceWhereUniqueInput
    data: XOR<NodePerformanceUpdateWithoutNodeInput, NodePerformanceUncheckedUpdateWithoutNodeInput>
  }

  export type NodePerformanceUpdateManyWithWhereWithoutNodeInput = {
    where: NodePerformanceScalarWhereInput
    data: XOR<NodePerformanceUpdateManyMutationInput, NodePerformanceUncheckedUpdateManyWithoutNodeInput>
  }

  export type NodePerformanceScalarWhereInput = {
    AND?: NodePerformanceScalarWhereInput | NodePerformanceScalarWhereInput[]
    OR?: NodePerformanceScalarWhereInput[]
    NOT?: NodePerformanceScalarWhereInput | NodePerformanceScalarWhereInput[]
    id?: StringFilter<"NodePerformance"> | string
    nodeId?: StringFilter<"NodePerformance"> | string
    cpuUsage?: FloatFilter<"NodePerformance"> | number
    memoryUsage?: FloatFilter<"NodePerformance"> | number
    diskUsage?: FloatFilter<"NodePerformance"> | number
    networkLatency?: FloatFilter<"NodePerformance"> | number
    bandwidthUp?: FloatFilter<"NodePerformance"> | number
    bandwidthDown?: FloatFilter<"NodePerformance"> | number
    timestamp?: DateTimeFilter<"NodePerformance"> | Date | string
  }

  export type UserNodeCreateWithoutPerformancesInput = {
    id?: string
    nodeId: string
    type: string
    capacity?: string | null
    location?: string | null
    monitorUrl?: string | null
    status?: string
    uptime?: string
    earnings?: string
    totalEarned?: number
    startDate?: Date | string
    hardware?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNodesInput
    project: DePINProjectCreateNestedOneWithoutNodesInput
  }

  export type UserNodeUncheckedCreateWithoutPerformancesInput = {
    id?: string
    userId: string
    projectId: string
    nodeId: string
    type: string
    capacity?: string | null
    location?: string | null
    monitorUrl?: string | null
    status?: string
    uptime?: string
    earnings?: string
    totalEarned?: number
    startDate?: Date | string
    hardware?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserNodeCreateOrConnectWithoutPerformancesInput = {
    where: UserNodeWhereUniqueInput
    create: XOR<UserNodeCreateWithoutPerformancesInput, UserNodeUncheckedCreateWithoutPerformancesInput>
  }

  export type UserNodeUpsertWithoutPerformancesInput = {
    update: XOR<UserNodeUpdateWithoutPerformancesInput, UserNodeUncheckedUpdateWithoutPerformancesInput>
    create: XOR<UserNodeCreateWithoutPerformancesInput, UserNodeUncheckedCreateWithoutPerformancesInput>
    where?: UserNodeWhereInput
  }

  export type UserNodeUpdateToOneWithWhereWithoutPerformancesInput = {
    where?: UserNodeWhereInput
    data: XOR<UserNodeUpdateWithoutPerformancesInput, UserNodeUncheckedUpdateWithoutPerformancesInput>
  }

  export type UserNodeUpdateWithoutPerformancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    monitorUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    uptime?: StringFieldUpdateOperationsInput | string
    earnings?: StringFieldUpdateOperationsInput | string
    totalEarned?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hardware?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNodesNestedInput
    project?: DePINProjectUpdateOneRequiredWithoutNodesNestedInput
  }

  export type UserNodeUncheckedUpdateWithoutPerformancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    monitorUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    uptime?: StringFieldUpdateOperationsInput | string
    earnings?: StringFieldUpdateOperationsInput | string
    totalEarned?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hardware?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutRoiCalculationsInput = {
    id?: string
    walletAddress: string
    publicKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    settings?: string | null
    nodes?: UserNodeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoiCalculationsInput = {
    id?: string
    walletAddress: string
    publicKey: string
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string | null
    settings?: string | null
    nodes?: UserNodeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoiCalculationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoiCalculationsInput, UserUncheckedCreateWithoutRoiCalculationsInput>
  }

  export type DePINProjectCreateWithoutRoiCalculationsInput = {
    id?: string
    name: string
    category: string
    description: string
    blockchain: string
    tokenSymbol: string
    tokenPrice?: number
    marketCap?: string
    volume24h?: string
    apy: string
    status?: string
    minInvestment: number
    roiPeriod: number
    geographicFocus: string
    riskLevel: string
    hardwareRequirements: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nodes?: UserNodeCreateNestedManyWithoutProjectInput
  }

  export type DePINProjectUncheckedCreateWithoutRoiCalculationsInput = {
    id?: string
    name: string
    category: string
    description: string
    blockchain: string
    tokenSymbol: string
    tokenPrice?: number
    marketCap?: string
    volume24h?: string
    apy: string
    status?: string
    minInvestment: number
    roiPeriod: number
    geographicFocus: string
    riskLevel: string
    hardwareRequirements: string
    createdAt?: Date | string
    updatedAt?: Date | string
    nodes?: UserNodeUncheckedCreateNestedManyWithoutProjectInput
  }

  export type DePINProjectCreateOrConnectWithoutRoiCalculationsInput = {
    where: DePINProjectWhereUniqueInput
    create: XOR<DePINProjectCreateWithoutRoiCalculationsInput, DePINProjectUncheckedCreateWithoutRoiCalculationsInput>
  }

  export type UserUpsertWithoutRoiCalculationsInput = {
    update: XOR<UserUpdateWithoutRoiCalculationsInput, UserUncheckedUpdateWithoutRoiCalculationsInput>
    create: XOR<UserCreateWithoutRoiCalculationsInput, UserUncheckedCreateWithoutRoiCalculationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRoiCalculationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRoiCalculationsInput, UserUncheckedUpdateWithoutRoiCalculationsInput>
  }

  export type UserUpdateWithoutRoiCalculationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    nodes?: UserNodeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoiCalculationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletAddress?: StringFieldUpdateOperationsInput | string
    publicKey?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    settings?: NullableStringFieldUpdateOperationsInput | string | null
    nodes?: UserNodeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DePINProjectUpsertWithoutRoiCalculationsInput = {
    update: XOR<DePINProjectUpdateWithoutRoiCalculationsInput, DePINProjectUncheckedUpdateWithoutRoiCalculationsInput>
    create: XOR<DePINProjectCreateWithoutRoiCalculationsInput, DePINProjectUncheckedCreateWithoutRoiCalculationsInput>
    where?: DePINProjectWhereInput
  }

  export type DePINProjectUpdateToOneWithWhereWithoutRoiCalculationsInput = {
    where?: DePINProjectWhereInput
    data: XOR<DePINProjectUpdateWithoutRoiCalculationsInput, DePINProjectUncheckedUpdateWithoutRoiCalculationsInput>
  }

  export type DePINProjectUpdateWithoutRoiCalculationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    blockchain?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    tokenPrice?: FloatFieldUpdateOperationsInput | number
    marketCap?: StringFieldUpdateOperationsInput | string
    volume24h?: StringFieldUpdateOperationsInput | string
    apy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    minInvestment?: FloatFieldUpdateOperationsInput | number
    roiPeriod?: IntFieldUpdateOperationsInput | number
    geographicFocus?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    hardwareRequirements?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodes?: UserNodeUpdateManyWithoutProjectNestedInput
  }

  export type DePINProjectUncheckedUpdateWithoutRoiCalculationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    blockchain?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    tokenPrice?: FloatFieldUpdateOperationsInput | number
    marketCap?: StringFieldUpdateOperationsInput | string
    volume24h?: StringFieldUpdateOperationsInput | string
    apy?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    minInvestment?: FloatFieldUpdateOperationsInput | number
    roiPeriod?: IntFieldUpdateOperationsInput | number
    geographicFocus?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    hardwareRequirements?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nodes?: UserNodeUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserNodeCreateManyUserInput = {
    id?: string
    projectId: string
    nodeId: string
    type: string
    capacity?: string | null
    location?: string | null
    monitorUrl?: string | null
    status?: string
    uptime?: string
    earnings?: string
    totalEarned?: number
    startDate?: Date | string
    hardware?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ROICalculationCreateManyUserInput = {
    id?: string
    projectId: string
    location: string
    hardwareCost: number
    monthlyCost: number
    estimatedMonthlyReward: number
    roiMonths: number
    annualROI: number
    riskFactors: string
    createdAt?: Date | string
  }

  export type UserNodeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    monitorUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    uptime?: StringFieldUpdateOperationsInput | string
    earnings?: StringFieldUpdateOperationsInput | string
    totalEarned?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hardware?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: DePINProjectUpdateOneRequiredWithoutNodesNestedInput
    performances?: NodePerformanceUpdateManyWithoutNodeNestedInput
  }

  export type UserNodeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    monitorUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    uptime?: StringFieldUpdateOperationsInput | string
    earnings?: StringFieldUpdateOperationsInput | string
    totalEarned?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hardware?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performances?: NodePerformanceUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type UserNodeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    monitorUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    uptime?: StringFieldUpdateOperationsInput | string
    earnings?: StringFieldUpdateOperationsInput | string
    totalEarned?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hardware?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ROICalculationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    hardwareCost?: FloatFieldUpdateOperationsInput | number
    monthlyCost?: FloatFieldUpdateOperationsInput | number
    estimatedMonthlyReward?: FloatFieldUpdateOperationsInput | number
    roiMonths?: FloatFieldUpdateOperationsInput | number
    annualROI?: FloatFieldUpdateOperationsInput | number
    riskFactors?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: DePINProjectUpdateOneRequiredWithoutRoiCalculationsNestedInput
  }

  export type ROICalculationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    hardwareCost?: FloatFieldUpdateOperationsInput | number
    monthlyCost?: FloatFieldUpdateOperationsInput | number
    estimatedMonthlyReward?: FloatFieldUpdateOperationsInput | number
    roiMonths?: FloatFieldUpdateOperationsInput | number
    annualROI?: FloatFieldUpdateOperationsInput | number
    riskFactors?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ROICalculationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    hardwareCost?: FloatFieldUpdateOperationsInput | number
    monthlyCost?: FloatFieldUpdateOperationsInput | number
    estimatedMonthlyReward?: FloatFieldUpdateOperationsInput | number
    roiMonths?: FloatFieldUpdateOperationsInput | number
    annualROI?: FloatFieldUpdateOperationsInput | number
    riskFactors?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNodeCreateManyProjectInput = {
    id?: string
    userId: string
    nodeId: string
    type: string
    capacity?: string | null
    location?: string | null
    monitorUrl?: string | null
    status?: string
    uptime?: string
    earnings?: string
    totalEarned?: number
    startDate?: Date | string
    hardware?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ROICalculationCreateManyProjectInput = {
    id?: string
    userId: string
    location: string
    hardwareCost: number
    monthlyCost: number
    estimatedMonthlyReward: number
    roiMonths: number
    annualROI: number
    riskFactors: string
    createdAt?: Date | string
  }

  export type UserNodeUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    monitorUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    uptime?: StringFieldUpdateOperationsInput | string
    earnings?: StringFieldUpdateOperationsInput | string
    totalEarned?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hardware?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNodesNestedInput
    performances?: NodePerformanceUpdateManyWithoutNodeNestedInput
  }

  export type UserNodeUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    monitorUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    uptime?: StringFieldUpdateOperationsInput | string
    earnings?: StringFieldUpdateOperationsInput | string
    totalEarned?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hardware?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performances?: NodePerformanceUncheckedUpdateManyWithoutNodeNestedInput
  }

  export type UserNodeUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    monitorUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    uptime?: StringFieldUpdateOperationsInput | string
    earnings?: StringFieldUpdateOperationsInput | string
    totalEarned?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    hardware?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ROICalculationUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    hardwareCost?: FloatFieldUpdateOperationsInput | number
    monthlyCost?: FloatFieldUpdateOperationsInput | number
    estimatedMonthlyReward?: FloatFieldUpdateOperationsInput | number
    roiMonths?: FloatFieldUpdateOperationsInput | number
    annualROI?: FloatFieldUpdateOperationsInput | number
    riskFactors?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRoiCalculationsNestedInput
  }

  export type ROICalculationUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    hardwareCost?: FloatFieldUpdateOperationsInput | number
    monthlyCost?: FloatFieldUpdateOperationsInput | number
    estimatedMonthlyReward?: FloatFieldUpdateOperationsInput | number
    roiMonths?: FloatFieldUpdateOperationsInput | number
    annualROI?: FloatFieldUpdateOperationsInput | number
    riskFactors?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ROICalculationUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    hardwareCost?: FloatFieldUpdateOperationsInput | number
    monthlyCost?: FloatFieldUpdateOperationsInput | number
    estimatedMonthlyReward?: FloatFieldUpdateOperationsInput | number
    roiMonths?: FloatFieldUpdateOperationsInput | number
    annualROI?: FloatFieldUpdateOperationsInput | number
    riskFactors?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodePerformanceCreateManyNodeInput = {
    id?: string
    cpuUsage: number
    memoryUsage: number
    diskUsage: number
    networkLatency: number
    bandwidthUp: number
    bandwidthDown: number
    timestamp?: Date | string
  }

  export type NodePerformanceUpdateWithoutNodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuUsage?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: FloatFieldUpdateOperationsInput | number
    diskUsage?: FloatFieldUpdateOperationsInput | number
    networkLatency?: FloatFieldUpdateOperationsInput | number
    bandwidthUp?: FloatFieldUpdateOperationsInput | number
    bandwidthDown?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodePerformanceUncheckedUpdateWithoutNodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuUsage?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: FloatFieldUpdateOperationsInput | number
    diskUsage?: FloatFieldUpdateOperationsInput | number
    networkLatency?: FloatFieldUpdateOperationsInput | number
    bandwidthUp?: FloatFieldUpdateOperationsInput | number
    bandwidthDown?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NodePerformanceUncheckedUpdateManyWithoutNodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuUsage?: FloatFieldUpdateOperationsInput | number
    memoryUsage?: FloatFieldUpdateOperationsInput | number
    diskUsage?: FloatFieldUpdateOperationsInput | number
    networkLatency?: FloatFieldUpdateOperationsInput | number
    bandwidthUp?: FloatFieldUpdateOperationsInput | number
    bandwidthDown?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DePINProjectCountOutputTypeDefaultArgs instead
     */
    export type DePINProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DePINProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserNodeCountOutputTypeDefaultArgs instead
     */
    export type UserNodeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserNodeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DePINProjectDefaultArgs instead
     */
    export type DePINProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DePINProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserNodeDefaultArgs instead
     */
    export type UserNodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserNodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NodePerformanceDefaultArgs instead
     */
    export type NodePerformanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NodePerformanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ROICalculationDefaultArgs instead
     */
    export type ROICalculationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ROICalculationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SystemNotificationDefaultArgs instead
     */
    export type SystemNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SystemNotificationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}