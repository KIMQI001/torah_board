// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  walletAddress   String   @unique
  publicKey       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastLogin       DateTime?
  settings        String?  // JSON string for user preferences and settings
  
  // Relations
  nodes           UserNode[]
  roiCalculations ROICalculation[]
  daoMemberships  DAOMember[]
  
  @@map("users")
}

model DePINProject {
  id                 String   @id @default(cuid())
  name               String   @unique
  category           String   // 'STORAGE', 'COMPUTING', 'WIRELESS', 'SENSORS'
  description        String
  blockchain         String
  tokenSymbol        String
  tokenPrice         Float    @default(0)
  marketCap          String   @default("$0")
  volume24h          String   @default("$0")
  apy                String
  status             String   @default("ACTIVE") // 'ACTIVE', 'INACTIVE', 'MAINTENANCE'
  minInvestment      Float
  roiPeriod          Int      // in months
  geographicFocus    String   // JSON string array of countries/regions
  riskLevel          String   // 'LOW', 'MEDIUM', 'HIGH'
  hardwareRequirements String // JSON string array of hardware specs
  websiteUrl         String?  // Official website URL
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  nodes              UserNode[]
  roiCalculations    ROICalculation[]
  
  @@map("depin_projects")
}

model UserNode {
  id            String   @id @default(cuid())
  userId        String
  projectId     String
  nodeId        String   // User-defined node ID
  type          String
  capacity      String?
  location      String?
  monitorUrl    String?
  status        String   @default("SYNCING") // 'ONLINE', 'OFFLINE', 'SYNCING', 'ERROR'
  uptime        String   @default("0%")
  earnings      String   @default("$0/day")
  totalEarned   Float    @default(0)
  startDate     DateTime @default(now())
  hardware      String?  // JSON string of hardware specifications
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project       DePINProject @relation(fields: [projectId], references: [id])
  performances  NodePerformance[]
  
  @@unique([userId, nodeId]) // Unique node ID per user
  @@map("user_nodes")
}

model NodePerformance {
  id             String   @id @default(cuid())
  nodeId         String
  cpuUsage       Float
  memoryUsage    Float
  diskUsage      Float
  networkLatency Float
  bandwidthUp    Float
  bandwidthDown  Float
  timestamp      DateTime @default(now())
  
  // Relations
  node           UserNode @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  
  @@map("node_performances")
}

model ROICalculation {
  id                    String   @id @default(cuid())
  userId                String
  projectId             String
  location              String
  hardwareCost          Float
  monthlyCost           Float
  estimatedMonthlyReward Float
  roiMonths             Float
  annualROI             Float
  riskFactors           String   // JSON string array
  createdAt             DateTime @default(now())
  
  // Relations
  user                  User     @relation(fields: [userId], references: [id])
  project               DePINProject @relation(fields: [projectId], references: [id])
  
  @@map("roi_calculations")
}

model SystemNotification {
  id          String   @id @default(cuid())
  userId      String?  // null for system-wide notifications
  type        String   // 'NODE_STATUS', 'EARNINGS_UPDATE', 'SYSTEM_ALERT', 'CAPACITY_UPDATE'
  title       String
  message     String
  isRead      Boolean  @default(false)
  data        String?  // JSON string for additional notification data
  createdAt   DateTime @default(now())
  
  @@map("system_notifications")
}

// DAO Models
model DAO {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String
  treasuryAddress String
  governanceToken String
  totalSupply     Float    @default(0)
  quorumThreshold Float    @default(50) // percentage
  votingPeriod    Int      @default(7) // days
  status          String   @default("ACTIVE") // 'ACTIVE', 'PAUSED', 'DISSOLVED'
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  proposals       DAOProposal[]
  projects        DAOProject[]
  members         DAOMember[]
  treasury        DAOTreasury[]
  distributions   DAODistribution[]
  fundingRequests DAOFundingRequest[]
  milestoneVerifications DAOMilestoneVerification[]
  
  @@map("daos")
}

model DAOProposal {
  id              String   @id @default(cuid())
  daoId           String
  title           String
  description     String
  proposer        String
  status          String   @default("DRAFT") // 'DRAFT', 'ACTIVE', 'PASSED', 'FAILED', 'EXECUTED', 'CANCELLED'
  category        String   // 'INVESTMENT', 'GOVERNANCE', 'TREASURY', 'MEMBERSHIP'
  requestedAmount Float?
  votesFor        Float    @default(0)
  votesAgainst    Float    @default(0)
  votesAbstain    Float    @default(0)
  totalVotes      Float    @default(0)
  quorum          Float
  threshold       Float    @default(60)
  startTime       DateTime
  endTime         DateTime
  executionTime   DateTime?
  discussion      String?
  attachments     String?  // JSON array
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  dao             DAO      @relation(fields: [daoId], references: [id], onDelete: Cascade)
  votes           DAOVote[]
  fundingRequests DAOFundingRequest[]
  
  @@map("dao_proposals")
}

model DAOProject {
  id              String   @id @default(cuid())
  daoId           String
  title           String
  description     String
  status          String   @default("PLANNING") // 'PLANNING', 'ACTIVE', 'MILESTONE_PENDING', 'COMPLETED', 'CANCELLED'
  category        String
  totalBudget     Float
  allocatedFunds  Float    @default(0)
  spentFunds      Float    @default(0)
  roi             Float    @default(0)
  riskLevel       String   // 'LOW', 'MEDIUM', 'HIGH'
  teamMembers     String   // JSON array
  startDate       DateTime
  expectedEndDate DateTime
  completedDate   DateTime?
  tokenReward     Float    @default(0) // Governance tokens earned upon completion
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  dao             DAO      @relation(fields: [daoId], references: [id], onDelete: Cascade)
  milestones      DAOMilestone[]
  tasks           DAOTask[]
  verifications   DAOMilestoneVerification[]
  
  @@map("dao_projects")
}

model DAOMilestone {
  id              String   @id @default(cuid())
  projectId       String
  title           String
  description     String
  targetDate      DateTime
  completedDate   DateTime?
  budget          Float
  status          String   @default("PENDING") // 'PENDING', 'IN_PROGRESS', 'COMPLETED', 'VERIFIED', 'PAID'
  deliverables    String   // JSON array
  verificationReq Float    @default(51) // percentage of voting power needed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  project         DAOProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  verifications   DAOMilestoneVerification[]
  
  @@map("dao_milestones")
}

model DAOMember {
  id              String   @id @default(cuid())
  daoId           String
  userId          String
  address         String
  role            String   @default("MEMBER") // 'CHAIR', 'ADMIN', 'MEMBER'
  votingPower     Float    @default(0)
  reputation      Float    @default(50)
  contributionScore Float  @default(0)
  delegatedTo     String?
  delegatedFrom   String?  // JSON array
  proposalsCreated Int     @default(0)
  votesParticipated Int    @default(0)
  joinDate        DateTime @default(now())
  lastActivity    DateTime @default(now())
  status          String   @default("ACTIVE") // 'ACTIVE', 'INACTIVE', 'SUSPENDED'
  
  // Relations
  dao             DAO      @relation(fields: [daoId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes           DAOVote[]
  fundingReviews  DAOFundingReview[]
  verificationReviews DAOVerificationReview[]
  
  @@unique([daoId, userId])
  @@map("dao_members")
}

model DAOVote {
  id              String   @id @default(cuid())
  proposalId      String
  memberId        String
  voteType        String   // 'FOR', 'AGAINST', 'ABSTAIN'
  votingPower     Float
  reason          String?
  timestamp       DateTime @default(now())
  
  // Relations
  proposal        DAOProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  member          DAOMember   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  
  @@unique([proposalId, memberId])
  @@map("dao_votes")
}

model DAOTreasury {
  id              String   @id @default(cuid())
  daoId           String
  type            String   // 'DEPOSIT', 'WITHDRAWAL', 'INVESTMENT', 'REWARD', 'FEE', 'MILESTONE_PAYMENT'
  amount          Float
  token           String
  from            String?
  to              String?
  description     String
  proposalId      String?
  projectId       String?
  txHash          String?
  status          String   @default("PENDING") // 'PENDING', 'CONFIRMED', 'FAILED'
  timestamp       DateTime @default(now())
  
  // Relations
  dao             DAO      @relation(fields: [daoId], references: [id], onDelete: Cascade)
  
  @@map("dao_treasury")
}

model DAODistribution {
  id              String   @id @default(cuid())
  daoId           String
  name            String
  method          String   // 'TOKEN_HOLDING', 'CONTRIBUTION', 'EQUAL', 'CUSTOM'
  frequency       String   // 'DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY'
  isActive        Boolean  @default(true)
  totalDistributed Float   @default(0)
  eligibleMembers Int      @default(0)
  lastDistribution DateTime?
  nextDistribution DateTime
  rules           String?  // JSON configuration
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  dao             DAO      @relation(fields: [daoId], references: [id], onDelete: Cascade)
  
  @@map("dao_distributions")
}

model DAOTask {
  id              String   @id @default(cuid())
  projectId       String
  title           String
  description     String
  status          String   @default("TODO") // 'TODO', 'IN_PROGRESS', 'REVIEW', 'COMPLETED'
  priority        String   @default("MEDIUM") // 'LOW', 'MEDIUM', 'HIGH', 'URGENT'
  assigneeId      String?  // User ID of assigned member
  costEstimate    Float    @default(0) // SOL cost for completing task
  tokenReward     Float    @default(0) // Governance tokens earned upon completion
  dueDate         DateTime?
  completedDate   DateTime?
  attachments     String?  // JSON array of file URLs
  tags            String?  // JSON array of tags
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  project         DAOProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("dao_tasks")
}

model DAOFundingRequest {
  id                String   @id @default(cuid())
  daoId             String
  proposalId        String?
  requestType       String   // 'PROJECT_FUNDING', 'MILESTONE_PAYMENT', 'EMERGENCY_FUND', 'OPERATIONAL_EXPENSES'
  amount            Float
  token             String
  recipient         String
  purpose           String
  justification     String
  requiredDocuments String   // JSON array
  attachments       String?  // JSON array
  status            String   @default("DRAFT") // 'DRAFT', 'SUBMITTED', 'UNDER_REVIEW', 'APPROVED', 'REJECTED', 'EXECUTED'
  reviewers         String   // JSON array of reviewer IDs
  approvalThreshold Float
  currentApprovals  Float    @default(0)
  reviewDeadline    DateTime
  rejectionReason   String?
  executedAt        DateTime?
  executorId        String?
  transactionId     String?
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  dao               DAO      @relation(fields: [daoId], references: [id], onDelete: Cascade)
  proposal          DAOProposal? @relation(fields: [proposalId], references: [id])
  reviews           DAOFundingReview[]
  
  @@map("dao_funding_requests")
}

model DAOFundingReview {
  id              String   @id @default(cuid())
  requestId       String
  reviewerId      String
  decision        String   // 'APPROVE', 'REJECT', 'REQUEST_CHANGES'
  comments        String
  attachments     String?  // JSON array
  votingPower     Float
  timestamp       DateTime @default(now())
  
  // Relations
  request         DAOFundingRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  reviewer        DAOMember @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  
  @@unique([requestId, reviewerId])
  @@map("dao_funding_reviews")
}

model DAOMilestoneVerification {
  id                    String   @id @default(cuid())
  milestoneId           String
  projectId             String
  daoId                 String
  verificationMethod    String   // 'PEER_REVIEW', 'AUTOMATED_CHECK', 'EXTERNAL_AUDIT', 'DELIVERABLE_SUBMISSION'
  requiredEvidence      String   // JSON array
  submittedEvidence     String   // JSON array
  verifiers             String   // JSON array of verifier IDs
  verificationThreshold Float
  currentApprovals      Float    @default(0)
  status                String   @default("PENDING") // 'PENDING', 'UNDER_REVIEW', 'VERIFIED', 'REJECTED', 'PAYMENT_PROCESSED'
  submittedBy           String
  verificationNotes     String?
  verificationDeadline  DateTime
  verifiedAt            DateTime?
  rejectionReason       String?
  paymentTransactionId  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  dao                   DAO      @relation(fields: [daoId], references: [id], onDelete: Cascade)
  project               DAOProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  milestone             DAOMilestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  reviews               DAOVerificationReview[]
  
  @@map("dao_milestone_verifications")
}

model DAOVerificationReview {
  id               String   @id @default(cuid())
  verificationId   String
  reviewerId       String
  decision         String   // 'APPROVE', 'REJECT', 'REQUEST_MORE_EVIDENCE'
  comments         String
  evidenceChecked  String   // JSON array
  votingPower      Float
  timestamp        DateTime @default(now())
  
  // Relations
  verification     DAOMilestoneVerification @relation(fields: [verificationId], references: [id], onDelete: Cascade)
  reviewer         DAOMember @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  
  @@unique([verificationId, reviewerId])
  @@map("dao_verification_reviews")
}